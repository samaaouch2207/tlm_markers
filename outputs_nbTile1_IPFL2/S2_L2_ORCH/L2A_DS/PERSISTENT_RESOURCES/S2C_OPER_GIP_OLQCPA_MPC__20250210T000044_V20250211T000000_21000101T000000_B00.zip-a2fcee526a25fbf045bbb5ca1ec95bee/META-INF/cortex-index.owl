<?xml version="1.0" encoding="UTF-8"?>
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#" xmlns:owl="http://www.w3.org/2002/07/owl#" xmlns:drb="http://www.gael.fr/drb#" xmlns:amalfi="http://www.gael.fr/amalfi#" xml:base="http://www.esa.int/s2#">
   <rdf:Description rdf:about="http://www.esa.int/s2#pdiTar">
      <amalfi:inspection rdf:resource="http://www.esa.int/s2#pdiTar_concluding_checklist"/>
   </rdf:Description>
   <amalfi:inspection rdf:ID="pdiTar_concluding_checklist">
      <amalfi:name>pdiTar concluding checklist</amalfi:name>
      <amalfi:plan>
         <rdf:Description>
            <amalfi:sequence>
               <rdf:Description>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#testSize"/>
                  <amalfi:inspectionsOf><![CDATA[
                     (*, IMG_DATA/*)
                  ]]></amalfi:inspectionsOf>
               </rdf:Description>
            </amalfi:sequence>
         </rdf:Description>
      </amalfi:plan>
   </amalfi:inspection>
   <rdf:Description rdf:about="http://www.esa.int/s2#pdi_level_0_container">
      <amalfi:inspection rdf:resource="http://www.esa.int/s2#pdi_level_0_container_concluding_checklist"/>
   </rdf:Description>
   <amalfi:inspection rdf:ID="pdi_level_0_container_concluding_checklist">
      <amalfi:name>pdi_level_0_container concluding checklist</amalfi:name>
      <amalfi:plan>
         <rdf:Description>
            <amalfi:sequence>
               <rdf:Description>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#checkSafeManifest"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#checkMetadata"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#acquisitionPeriodExists"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#processingExists"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#acquisitionPeriodCategory"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#acquisitionPeriodClassification"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#processingCategory"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#processingClassification"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#platformCategory"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#platformClassification"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#schemaCategory"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#schemaClassification"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#annotationCategory"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#annotationClassification"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#frameSetCategory"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#frameSetClassification"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#gridReferenceCategory"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#gridReferenceClassification"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#indexCategory"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#indexClassification"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#informationCategory"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#informationClassification"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#orbitReferenceCategory"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#orbitReferenceClassification"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#qualityInformationCategory"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#qualityInformationClassification"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#idReferences"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#extraData"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#hrefExist"/>
                  <amalfi:inspectionsOf><![CDATA[
                     (*, IMG_DATA/*)
                  ]]></amalfi:inspectionsOf>
               </rdf:Description>
            </amalfi:sequence>
         </rdf:Description>
      </amalfi:plan>
   </amalfi:inspection>
   <rdf:Description rdf:about="http://www.esa.int/s2#pdi_level_1_container">
      <amalfi:inspection rdf:resource="http://www.esa.int/s2#pdi_level_1_container_concluding_checklist"/>
   </rdf:Description>
   <amalfi:inspection rdf:ID="pdi_level_1_container_concluding_checklist">
      <amalfi:name>pdi_level_1_container concluding checklist</amalfi:name>
      <amalfi:plan>
         <rdf:Description>
            <amalfi:sequence>
               <rdf:Description>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#checkSafeManifest"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#checkMetadata"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#acquisitionPeriodExists"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#processingExists"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#acquisitionPeriodCategory"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#acquisitionPeriodClassification"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#processingCategory"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#processingClassification"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#platformCategory"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#platformClassification"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#schemaCategory"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#schemaClassification"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#annotationCategory"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#annotationClassification"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#frameSetCategory"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#frameSetClassification"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#gridReferenceCategory"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#gridReferenceClassification"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#indexCategory"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#indexClassification"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#informationCategory"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#informationClassification"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#orbitReferenceCategory"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#orbitReferenceClassification"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#qualityInformationCategory"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#qualityInformationClassification"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#idReferences"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#extraData"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#hrefExist"/>
                  <amalfi:inspectionsOf><![CDATA[
                     (*, IMG_DATA/*)
                  ]]></amalfi:inspectionsOf>
               </rdf:Description>
            </amalfi:sequence>
         </rdf:Description>
      </amalfi:plan>
   </amalfi:inspection>
   <rdf:Description rdf:about="http://www.esa.int/s2#pdi_level_2_container">
      <amalfi:inspection rdf:resource="http://www.esa.int/s2#pdi_level_2_container_concluding_checklist"/>
   </rdf:Description>
   <amalfi:inspection rdf:ID="pdi_level_2_container_concluding_checklist">
      <amalfi:name>pdi_level_2_container concluding checklist</amalfi:name>
      <amalfi:plan>
         <rdf:Description>
            <amalfi:sequence>
               <rdf:Description>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#checkMetadata"/>
                  <amalfi:inspectionsOf><![CDATA[
                     (*, IMG_DATA/R10m/*, IMG_DATA/R20m/*, IMG_DATA/R60m/*)
                  ]]></amalfi:inspectionsOf>
               </rdf:Description>
            </amalfi:sequence>
         </rdf:Description>
      </amalfi:plan>
   </amalfi:inspection>
   <rdf:Description rdf:about="http://www.esa.int/s2#pdi_level_1a_granule_container">
      <amalfi:inspection rdf:resource="http://www.esa.int/s2#pdi_level_1a_granule_container_concluding_checklist"/>
   </rdf:Description>
   <amalfi:inspection rdf:ID="pdi_level_1a_granule_container_concluding_checklist">
      <amalfi:name>pdi_level_1a_granule_container concluding checklist</amalfi:name>
      <amalfi:plan>
         <rdf:Description>
            <amalfi:sequence>
               <rdf:Description>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Granule_Dimensions_10m"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Granule_Dimensions_20m"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Granule_Dimensions_60m"/>
               </rdf:Description>
            </amalfi:sequence>
         </rdf:Description>
      </amalfi:plan>
   </amalfi:inspection>
   <rdf:Description rdf:about="http://www.esa.int/s2#pdi_level_1b_granule_container">
      <amalfi:inspection rdf:resource="http://www.esa.int/s2#pdi_level_1b_granule_container_concluding_checklist"/>
   </rdf:Description>
   <amalfi:inspection rdf:ID="pdi_level_1b_granule_container_concluding_checklist">
      <amalfi:name>pdi_level_1b_granule_container concluding checklist</amalfi:name>
      <amalfi:plan>
         <rdf:Description>
            <amalfi:sequence>
               <rdf:Description>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Granule_Dimensions_10m"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Granule_Dimensions_20m"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Granule_Dimensions_60m"/>
               </rdf:Description>
            </amalfi:sequence>
         </rdf:Description>
      </amalfi:plan>
   </amalfi:inspection>
   <rdf:Description rdf:about="http://www.esa.int/s2#pdi_level_1c_tile_container">
      <amalfi:inspection rdf:resource="http://www.esa.int/s2#pdi_level_1c_tile_container_concluding_checklist"/>
   </rdf:Description>
   <amalfi:inspection rdf:ID="pdi_level_1c_tile_container_concluding_checklist">
      <amalfi:name>pdi_level_1c_tile_container concluding checklist</amalfi:name>
      <amalfi:plan>
         <rdf:Description>
            <amalfi:sequence>
               <rdf:Description>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Granule_Dimensions_10m"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Granule_Dimensions_20m"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Granule_Dimensions_60m"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#PVI_and_TCI"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Ecmwf"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Aux_Cams"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Data_Loss"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#checkL1CMasks"/>
               </rdf:Description>
            </amalfi:sequence>
         </rdf:Description>
      </amalfi:plan>
   </amalfi:inspection>
   <rdf:Description rdf:about="http://www.esa.int/s2#pdi_level_2a_tile_container">
      <amalfi:inspection rdf:resource="http://www.esa.int/s2#pdi_level_2a_tile_container_concluding_checklist"/>
   </rdf:Description>
   <amalfi:inspection rdf:ID="pdi_level_2a_tile_container_concluding_checklist">
      <amalfi:name>pdi_level_2a_tile_container concluding checklist</amalfi:name>
      <amalfi:plan>
         <rdf:Description>
            <amalfi:sequence>
               <rdf:Description>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Granule_Dimensions_10m"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Granule_Dimensions_20m"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Granule_Dimensions_60m"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Ecmwf"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Aux_Cams"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Data_Loss"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#checkL2AImages"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#checkL2AMasks"/>
               </rdf:Description>
            </amalfi:sequence>
         </rdf:Description>
      </amalfi:plan>
   </amalfi:inspection>
   <rdf:Description rdf:about="http://www.esa.int/s2#pdi_level_0_granule_metadata">
      <amalfi:inspection rdf:resource="http://www.esa.int/s2#pdi_level_0_granule_metadata_concluding_checklist"/>
   </rdf:Description>
   <amalfi:inspection rdf:ID="pdi_level_0_granule_metadata_concluding_checklist">
      <amalfi:name>pdi_level_0_granule_metadata concluding checklist</amalfi:name>
      <amalfi:plan>
         <rdf:Description>
            <amalfi:sequence>
               <rdf:Description>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Corrupted_ISP"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Sensing_Time"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Missing_Lines"/>
               </rdf:Description>
            </amalfi:sequence>
         </rdf:Description>
      </amalfi:plan>
   </amalfi:inspection>
   <rdf:Description rdf:about="http://www.esa.int/s2#pdi_level_0_datastrip_metadata">
      <amalfi:inspection rdf:resource="http://www.esa.int/s2#pdi_level_0_datastrip_metadata_concluding_checklist"/>
   </rdf:Description>
   <amalfi:inspection rdf:ID="pdi_level_0_datastrip_metadata_concluding_checklist">
      <amalfi:name>pdi_level_0_datastrip_metadata concluding checklist</amalfi:name>
      <amalfi:plan>
         <rdf:Description>
            <amalfi:sequence>
               <rdf:Description>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Lost_Packets"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Degraded_Packets"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Datation_Model_RMOY"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Datation_Model_GPS_SYNC"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Orbit_Number_DOWNLINK"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Relative_Orbit_Number_SENSING"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Attitude_Quality_Indicator_Raw"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Attitude_Quality_Indicator_Corrected"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Start_Stop_Time"/>
               </rdf:Description>
            </amalfi:sequence>
         </rdf:Description>
      </amalfi:plan>
   </amalfi:inspection>
   <rdf:Description rdf:about="http://www.esa.int/s2#pdi_level_1a_granule_metadata">
      <amalfi:inspection rdf:resource="http://www.esa.int/s2#pdi_level_1a_granule_metadata_concluding_checklist"/>
   </rdf:Description>
   <amalfi:inspection rdf:ID="pdi_level_1a_granule_metadata_concluding_checklist">
      <amalfi:name>pdi_level_1a_granule_metadata concluding checklist</amalfi:name>
      <amalfi:plan>
         <rdf:Description>
            <amalfi:sequence>
               <rdf:Description>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Corrupted_ISP"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Sensing_Time"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Missing_Lines"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Granule_Footprint"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Solar_Angle_Azimuth"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Solar_Angle_Zenith"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Incidence_Angle_Azimuth"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Incidence_Angle_Zenith"/>
               </rdf:Description>
            </amalfi:sequence>
         </rdf:Description>
      </amalfi:plan>
   </amalfi:inspection>
   <rdf:Description rdf:about="http://www.esa.int/s2#pdi_level_1a_datastrip_metadata">
      <amalfi:inspection rdf:resource="http://www.esa.int/s2#pdi_level_1a_datastrip_metadata_concluding_checklist"/>
   </rdf:Description>
   <amalfi:inspection rdf:ID="pdi_level_1a_datastrip_metadata_concluding_checklist">
      <amalfi:name>pdi_level_1a_datastrip_metadata concluding checklist</amalfi:name>
      <amalfi:plan>
         <rdf:Description>
            <amalfi:sequence>
               <rdf:Description>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Degraded_SAD"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Lost_Packets"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Degraded_Packets"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Datation_Model_RMOY"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Datation_Model_GPS_SYNC"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Orbit_Number_DOWNLINK"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Relative_Orbit_Number_SENSING"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Attitude_Quality_Indicator_Raw"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Attitude_Quality_Indicator_Corrected"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Start_Stop_Time"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Processor_Version"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Ephemeris_Quality"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Planimetric_Stability"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Absolute_Location_Value"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#List_Fake_Decompressed_Source_Frames"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#EqualizationFlag"/>
               </rdf:Description>
            </amalfi:sequence>
         </rdf:Description>
      </amalfi:plan>
   </amalfi:inspection>
   <rdf:Description rdf:about="http://www.esa.int/s2#pdi_level_1b_granule_metadata">
      <amalfi:inspection rdf:resource="http://www.esa.int/s2#pdi_level_1b_granule_metadata_concluding_checklist"/>
   </rdf:Description>
   <amalfi:inspection rdf:ID="pdi_level_1b_granule_metadata_concluding_checklist">
      <amalfi:name>pdi_level_1b_granule_metadata concluding checklist</amalfi:name>
      <amalfi:plan>
         <rdf:Description>
            <amalfi:sequence>
               <rdf:Description>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Corrupted_ISP"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Sensing_Time"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Missing_Lines"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Granule_Footprint"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Solar_Angle_Azimuth"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Solar_Angle_Zenith"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Incidence_Angle_Azimuth"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Incidence_Angle_Zenith"/>
               </rdf:Description>
            </amalfi:sequence>
         </rdf:Description>
      </amalfi:plan>
   </amalfi:inspection>
   <rdf:Description rdf:about="http://www.esa.int/s2#pdi_level_1b_datastrip_metadata">
      <amalfi:inspection rdf:resource="http://www.esa.int/s2#pdi_level_1b_datastrip_metadata_concluding_checklist"/>
   </rdf:Description>
   <amalfi:inspection rdf:ID="pdi_level_1b_datastrip_metadata_concluding_checklist">
      <amalfi:name>pdi_level_1b_datastrip_metadata concluding checklist</amalfi:name>
      <amalfi:plan>
         <rdf:Description>
            <amalfi:sequence>
               <rdf:Description>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Degraded_SAD"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Lost_Packets"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Degraded_Packets"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Datation_Model_RMOY"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Datation_Model_GPS_SYNC"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Orbit_Number_DOWNLINK"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Relative_Orbit_Number_SENSING"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Attitude_Quality_Indicator_Raw"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Attitude_Quality_Indicator_Corrected"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Start_Stop_Time"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Processor_Version"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Ephemeris_Quality"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Planimetric_Stability"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Absolute_Location_Value"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#List_Fake_Decompressed_Source_Frames"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Radiometric_Quality_Indicators_Absolute"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Radiometric_Quality_Indicators_Cross_Band"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Radiometric_Quality_Indicators_Multi_Temporal"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#EqualizationOffset"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#EqualizationFlag"/>
               </rdf:Description>
            </amalfi:sequence>
         </rdf:Description>
      </amalfi:plan>
   </amalfi:inspection>
   <rdf:Description rdf:about="http://www.esa.int/s2#pdi_level_1c_tile_metadata">
      <amalfi:inspection rdf:resource="http://www.esa.int/s2#pdi_level_1c_tile_metadata_concluding_checklist"/>
   </rdf:Description>
   <amalfi:inspection rdf:ID="pdi_level_1c_tile_metadata_concluding_checklist">
      <amalfi:name>pdi_level_1c_tile_metadata concluding checklist</amalfi:name>
      <amalfi:plan>
         <rdf:Description>
            <amalfi:sequence>
               <rdf:Description>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Corrupted_ISP"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Sensing_Time"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Missing_Lines"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Solar_Angle_Azimuth"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Solar_Angle_Zenith"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Tile_Position_Geoposition"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Tile_Position_Size"/>
               </rdf:Description>
            </amalfi:sequence>
         </rdf:Description>
      </amalfi:plan>
   </amalfi:inspection>
   <rdf:Description rdf:about="http://www.esa.int/s2#pdi_level_1c_datastrip_metadata">
      <amalfi:inspection rdf:resource="http://www.esa.int/s2#pdi_level_1c_datastrip_metadata_concluding_checklist"/>
   </rdf:Description>
   <amalfi:inspection rdf:ID="pdi_level_1c_datastrip_metadata_concluding_checklist">
      <amalfi:name>pdi_level_1c_datastrip_metadata concluding checklist</amalfi:name>
      <amalfi:plan>
         <rdf:Description>
            <amalfi:sequence>
               <rdf:Description>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Degraded_SAD"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Lost_Packets"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Degraded_Packets"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Datation_Model_RMOY"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Datation_Model_GPS_SYNC"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Orbit_Number_DOWNLINK"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Relative_Orbit_Number_SENSING"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Attitude_Quality_Indicator_Raw"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Attitude_Quality_Indicator_Corrected"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Start_Stop_Time"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Processor_Version"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Ephemeris_Quality"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Planimetric_Stability"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Absolute_Location_Value"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#List_Fake_Decompressed_Source_Frames"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Radiometric_Quality_Indicators_Absolute"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Radiometric_Quality_Indicators_Cross_Band"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Radiometric_Quality_Indicators_Multi_Temporal"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#QuantificationValue"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#IntegrationTime"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#SolarRadiance"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#EqualizationFlag"/>
               </rdf:Description>
            </amalfi:sequence>
         </rdf:Description>
      </amalfi:plan>
   </amalfi:inspection>
   <rdf:Description rdf:about="http://www.esa.int/s2#pdi_level_2a_tile_metadata">
      <amalfi:inspection rdf:resource="http://www.esa.int/s2#pdi_level_2a_tile_metadata_concluding_checklist"/>
   </rdf:Description>
   <amalfi:inspection rdf:ID="pdi_level_2a_tile_metadata_concluding_checklist">
      <amalfi:name>pdi_level_2a_tile_metadata concluding checklist</amalfi:name>
      <amalfi:plan>
         <rdf:Description>
            <amalfi:sequence>
               <rdf:Description>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Sensing_Time"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Solar_Angle_Azimuth"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Solar_Angle_Zenith"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Tile_Position_Geoposition"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Tile_Position_Size"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#schemaXmlValidator"/>
               </rdf:Description>
            </amalfi:sequence>
         </rdf:Description>
      </amalfi:plan>
   </amalfi:inspection>
   <rdf:Description rdf:about="http://www.esa.int/s2#pdi_level_2a_datastrip_metadata">
      <amalfi:inspection rdf:resource="http://www.esa.int/s2#pdi_level_2a_datastrip_metadata_concluding_checklist"/>
   </rdf:Description>
   <amalfi:inspection rdf:ID="pdi_level_2a_datastrip_metadata_concluding_checklist">
      <amalfi:name>pdi_level_2a_datastrip_metadata concluding checklist</amalfi:name>
      <amalfi:plan>
         <rdf:Description>
            <amalfi:sequence>
               <rdf:Description>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Degraded_SAD"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Lost_Packets"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Degraded_Packets"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Datation_Model_RMOY"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Datation_Model_GPS_SYNC"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Orbit_Number_DOWNLINK"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Relative_Orbit_Number_SENSING"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Attitude_Quality_Indicator_Raw"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Attitude_Quality_Indicator_Corrected"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Start_Stop_Time"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Ephemeris_Quality"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Planimetric_Stability"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Absolute_Location_Value"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Radiometric_Quality_Indicators_Absolute"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Radiometric_Quality_Indicators_Cross_Band"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#Radiometric_Quality_Indicators_Multi_Temporal"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#QuantificationValueBOA"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#QuantificationValueAOT"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#QuantificationValueWVP"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#IntegrationTime"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#EqualizationFlag"/>
                  <amalfi:inspection rdf:resource="http://www.esa.int/s2#schemaXmlValidator"/>
               </rdf:Description>
            </amalfi:sequence>
         </rdf:Description>
      </amalfi:plan>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="SolarRadiance">
      <amalfi:name>Check Solar Radiance (@category:concluding,@thematic:RADIOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="band_thresholds_min">1912.69, 1970.06, 1820.66, 1505.24, 1409.25, 1286.33, 1153.82, 1036.14, 956.96, 806.84, 367.51, 246.07, 86.86</parameter>
                  <parameter name="band_thresholds_max">1916.52, 1974.00, 1824.30, 1508.25, 1412.07, 1288.90, 1156.13, 1038.21, 958.88, 808.46, 368.25, 246.56, 87.03</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
						declare variable $band_thresholds_min as xs:sequence* external;
						declare variable $band_thresholds_max as xs:sequence* external;						
						let $flag:=(
							for $band_number in (0 to 12)		
							let $solar_radiance := *[matches(name(), ".*_DataStrip_ID")]/Image_Data_Info/Radiometric_Info/Reflectance_Conversion/Solar_Irradiance_List/SOLAR_IRRADIANCE[@bandId=$band_number]
							where $solar_radiance < $band_thresholds_min[position() = $band_number+1] or $solar_radiance > $band_thresholds_max[position() = $band_number+1] 
							return '1'
						)
						return 
                  if (fn:empty ($flag)) then
                     true()
                  else
                     false()

               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
             	   "SOLAR RADIANCE is OK"
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
						declare variable $band_thresholds_min as xs:sequence* external;
						declare variable $band_thresholds_max as xs:sequence* external;						
						let $d:=(
							for $band_number in (0 to 12)		
							let $solar_radiance := *[matches(name(), ".*_DataStrip_ID")]/Image_Data_Info/Radiometric_Info/Reflectance_Conversion/Solar_Irradiance_List/SOLAR_IRRADIANCE[@bandId=$band_number]
							where $solar_radiance < $band_thresholds_min[position() = $band_number+1] or $solar_radiance > $band_thresholds_max[position() = $band_number+1]
							return  concat ("@SOLAR_RADIANCE_IN_BAND_",$band_number,"@",$solar_radiance," Allowed range [",$band_thresholds_min[position() = $band_number+1],",",$band_thresholds_max[position() = $band_number+1],"]@")
						)
						return  concat ("SOLAR RADIANCE is NOT OK", string-join($d,''))
 
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="EqualizationFlag">
      <amalfi:name>Check EQUALIZATION_MODE (@category:concluding,@thematic:RADIOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold">true</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[	       
             	   let $equ_mode:= *[matches(name(), ".*_DataStrip_ID")]/Image_Data_Info/Sensor_Configuration/Acquisition_Configuration/EQUALIZATION_MODE               
		   return ($equ_mode='true')
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
	       
		"Equalization Mode is set to TRUE"
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
	       
		"Equalization Mode is set to FALSE"

               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="EqualizationOffset">
      <amalfi:name>Check OFFSET_PROC (@category:concluding,@thematic:RADIOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold">10000</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
	       
             	   declare variable $band_thresholds as xs:sequence* external;
		   			let $flag:=(
                   	let $offsets := *[matches(name(), ".*_DataStrip_ID")]/Image_Data_Info/Radiometric_Info/Equalization/Equalized_Band_List/Equalized_Band/OFFSET_PROC
                   	return
		   				for $offset in $offsets
		   				where $offset != 'true'
		   				return 1
						)
		   			return 
                  if (fn:empty ($flag)) then
                     true()
                  else
                     false()
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
	       
 	              "Equalization band OFFSETS flags are set to TRUE"
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
	       
             	   declare variable $band_thresholds as xs:sequence* external;
             	   let $d:=(
		   	for $band_number in (0 to 12)		
                   	let $offset := *[matches(name(), ".*_DataStrip_ID")]/Image_Data_Info/Radiometric_Info/Equalization/Equalized_Band_List/Equalized_Band[@bandId=$band_number]/OFFSET_PROC
			where $offset != 'true' 
                   	return  concat ("@OFFSET_PROC_IN_BAND_",$band_number,"@",$offset,"@")
		   )
		   return  concat ("Equalization band OFFSETS are NOT OK", string-join($d,''))

               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="IntegrationTime">
      <amalfi:name>Check INTEGRATION_TIME (@category:concluding,@thematic:RADIOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="band_thresholds">6.5712035, 1.3697743, 1.0777116, 1.4165044, 2.7489364, 2.9748678, 3.0224323, 1.4982820, 3.0105412, 9.3092918, 5.4448843, 1.4398694, 1.5003681</parameter>
                  <parameter name="band_thresholds_abs">6.5712035, 1.3697743, 1.0777116, 1.4165044, 2.7489364, 2.9748678, 3.0224323, 1.4982820, 3.0105412, 9.3092918, 2.0690560, 1.4398694, 1.5003681</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
             	   declare variable $band_thresholds as xs:sequence* external;
             	   declare variable $band_thresholds_abs as xs:sequence* external;						
						let $flag:=(
							if (*[matches(name(), ".*_DataStrip_ID")]/General_Info/Datatake_Info/DATATAKE_TYPE = 'INS-ABSR') then							
								for $band_number in (0 to 12)		
                   			let $integration_time := *[matches(name(), ".*_DataStrip_ID")]/Image_Data_Info/Sensor_Configuration/Acquisition_Configuration/Spectral_Band_Info/Spectral_Band_Information[@bandId=$band_number]/INTEGRATION_TIME
		   						where $integration_time < $band_thresholds_abs[position() = $band_number+1] * 0.99 or $integration_time > $band_thresholds_abs[position() = $band_number+1] * 1.01
		   					return '1'							
							else
								for $band_number in (0 to 12)		
                   			let $integration_time := *[matches(name(), ".*_DataStrip_ID")]/Image_Data_Info/Sensor_Configuration/Acquisition_Configuration/Spectral_Band_Info/Spectral_Band_Information[@bandId=$band_number]/INTEGRATION_TIME
		   						where $integration_time < $band_thresholds[position() = $band_number+1] * 0.99 or $integration_time > $band_thresholds[position() = $band_number+1] * 1.01
		   					return '1'
						)
						return 
                  if (fn:empty ($flag)) then
                     true()
                  else
                     false()

               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
             	   "INTEGRATION_TIME is OK"
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
             	   declare variable $band_thresholds as xs:sequence* external;
             	   declare variable $band_thresholds_abs as xs:sequence* external;						
             	   let $d:=(
							if (*[matches(name(), ".*_DataStrip_ID")]/General_Info/Datatake_Info/DATATAKE_TYPE = 'INS-ABSR') then							
		   					for $band_number in (0 to 12)		
                   			let $integration_time := *[matches(name(), ".*_DataStrip_ID")]/Image_Data_Info/Sensor_Configuration/Acquisition_Configuration/Spectral_Band_Info/Spectral_Band_Information[@bandId=$band_number]/INTEGRATION_TIME
									where $integration_time < $band_thresholds_abs[position() = $band_number+1] * 0.99 or $integration_time > $band_thresholds_abs[position() = $band_number+1] * 1.01 
                   		return  concat ("@INTEGRATION_TIME_IN_BAND_",$band_number,"@",$integration_time," Allowed range [",$band_thresholds_abs[position() = $band_number+1 ] * 0.99,",",$band_thresholds_abs[position() = $band_number+1 ] * 1.01,"]@")
							else
		   					for $band_number in (0 to 12)		
                   			let $integration_time := *[matches(name(), ".*_DataStrip_ID")]/Image_Data_Info/Sensor_Configuration/Acquisition_Configuration/Spectral_Band_Info/Spectral_Band_Information[@bandId=$band_number]/INTEGRATION_TIME
									where $integration_time < $band_thresholds[position() = $band_number+1] * 0.99 or $integration_time > $band_thresholds[position() = $band_number+1] * 1.01 
                   		return  concat ("@INTEGRATION_TIME_IN_BAND_",$band_number,"@",$integration_time," Allowed range [",$band_thresholds[position() = $band_number+1 ] * 0.99,",",$band_thresholds[position() = $band_number+1 ] * 1.01,"]@")
		   			)
						return  concat ("INTEGRATION_TIME is NOT OK", string-join($d,''))
 
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="QuantificationValue">
      <amalfi:name>Check QUANTIFICATION_VALUE (@category:concluding,@thematic:RADIOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold">10000</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                   declare variable $threshold as xs:positiveInteger* external;
                   let $quantification_value := *[matches(name(), ".*_DataStrip_ID")]/Image_Data_Info/Radiometric_Info/QUANTIFICATION_VALUE
                   return
                   xs:positiveInteger(data($quantification_value)) = $threshold
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                "QUANTIFICATION_VALUE is OK"
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                   declare variable $threshold as xs:positiveInteger* external;
                   let $quantification_value := *[matches(name(), ".*_DataStrip_ID")]/Image_Data_Info//Radiometric_Info/QUANTIFICATION_VALUE
                   return 
                concat("QUANTIFICATION_VALUE is not ok (",$quantification_value,
                       ") and does not match the fixed value of ",$threshold,
                       "@QUANTIFICATION_VALUE@", $quantification_value, "@")
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="QuantificationValueBOA">
      <amalfi:name>Check BOA QUANTIFICATION_VALUE (@category:concluding,@thematic:RADIOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold">10000</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                   declare variable $threshold as xs:double* external;
                   let $quantification_value := *[matches(name(), ".*_DataStrip_ID")]/Image_Data_Info/Radiometric_Info/QUANTIFICATION_VALUES_LIST/BOA_QUANTIFICATION_VALUE
                   return
                   xs:double(data($quantification_value)) = $threshold
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                "BOA QUANTIFICATION_VALUE is OK"
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                   declare variable $threshold as xs:double* external;
                   let $quantification_value := *[matches(name(), ".*_DataStrip_ID")]/Image_Data_Info/Radiometric_Info/QUANTIFICATION_VALUES_LIST/BOA_QUANTIFICATION_VALUE
                   return 
                concat("BOA QUANTIFICATION_VALUE is not ok (",$quantification_value,
                       ") and does not match the fixed value of ",$threshold,
                       "@BOA_QUANTIFICATION_VALUE@", $quantification_value, "@")
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="QuantificationValueAOT">
      <amalfi:name>Check AOT QUANTIFICATION_VALUE (@category:concluding,@thematic:RADIOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold">1000</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                   declare variable $threshold as xs:double* external;
                   let $quantification_value := *[matches(name(), ".*_DataStrip_ID")]/Image_Data_Info/Radiometric_Info/QUANTIFICATION_VALUES_LIST/AOT_QUANTIFICATION_VALUE
                   return
                   xs:double(data($quantification_value)) = $threshold
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                "AOT QUANTIFICATION_VALUE is OK"
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                   declare variable $threshold as xs:double* external;
                   let $quantification_value := *[matches(name(), ".*_DataStrip_ID")]/Image_Data_Info/Radiometric_Info/QUANTIFICATION_VALUES_LIST/AOT_QUANTIFICATION_VALUE
                   return 
                concat("AOT QUANTIFICATION_VALUE is not ok (",$quantification_value,
                       ") and does not match the fixed value of ",$threshold,
                       "@AOT_QUANTIFICATION_VALUE@", $quantification_value, "@")
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="QuantificationValueWVP">
      <amalfi:name>Check WVP QUANTIFICATION_VALUE (@category:concluding,@thematic:RADIOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold">1000</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                   declare variable $threshold as xs:double* external;
                   let $quantification_value := *[matches(name(), ".*_DataStrip_ID")]/Image_Data_Info/Radiometric_Info/QUANTIFICATION_VALUES_LIST/WVP_QUANTIFICATION_VALUE
                   return
                   xs:double(data($quantification_value)) = $threshold
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                "WVP QUANTIFICATION_VALUE is OK"
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                   declare variable $threshold as xs:double* external;
                   let $quantification_value := *[matches(name(), ".*_DataStrip_ID")]/Image_Data_Info/Radiometric_Info/QUANTIFICATION_VALUES_LIST/WVP_QUANTIFICATION_VALUE
                   return 
                concat("WVP QUANTIFICATION_VALUE is not ok (",$quantification_value,
                       ") and does not match the fixed value of ",$threshold,
                       "@WVP_QUANTIFICATION_VALUE@", $quantification_value, "@")
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="checkL1CMasks">
      <amalfi:name>Masks availability check. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                     let $classi := QI_DATA/*[matches (name(), ".*MSK_CLASSI.*_B00.*\.jp2")]
                     let $qualit := QI_DATA/*[matches (name(), ".*MSK_QUALIT.*_B.*\.jp2")]
                     let $detfoo := QI_DATA/*[matches (name(), ".*MSK_DETFOO.*_B.*\.jp2")]
                     return
                     if (fn:count($classi) != 1
                         or fn:count($qualit) != 13
                         or fn:count($detfoo) != 13
                     )
                     then
                        fn:false()
                     else
                        fn:true()                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                  "All elements in QI_DATA are present."
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                     let $classi := QI_DATA/*[matches (name(), ".*MSK_CLASSI.*_B00.*\.jp2")]
                     let $qualit := QI_DATA/*[matches (name(), ".*MSK_QUALIT.*_B.*\.jp2")]
                     let $detfoo := QI_DATA/*[matches (name(), ".*MSK_DETFOO.*_B.*\.jp2")]
                     return concat("Some elements are missing in QI_DATA", 
                        (if (fn:count($classi) != 1) then ", MSK_CLASSI" else ""),
                        (if (fn:count($qualit) != 13) then ", MSK_QUALIT" else ""),
                        (if (fn:count($detfoo) != 13) then ", MSK_DETFOO" else "")
                     )
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Lost_Packets">
      <amalfi:name>Check the number of lost packets (@category:concluding,@thematic:GENERAL_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold">0</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                   declare variable $threshold as xs:positiveInteger* external;
                   let $lost_packets := *[matches(name(), ".*_DataStrip_ID")]/Image_Data_Info/Sensor_Configuration/Source_Packet_Description/Degradation_Summary/NUMBER_OF_LOST_PACKETS
                   return
                   if (fn:empty ($lost_packets))
                   then
                      fn:true()
                   else
                      xs:double(data($lost_packets)) <= xs:double($threshold)
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                  declare variable $threshold as xs:positiveInteger* external;
                  let $lost_packets := *[matches(name(), ".*_DataStrip_ID")]/
                     Image_Data_Info/Sensor_Configuration/Source_Packet_Description/Degradation_Summary/NUMBER_OF_LOST_PACKETS
                  return
                  if (fn:empty ($lost_packets))
                  then
                     "NUMBER_OF_LOST_PACKETS not found in dataset"
                  else
                     concat ("NUMBER_OF_LOST_PACKETS value ", data($lost_packets), " does not exceed the threshold (", $threshold ,") ",
                        "@NUMBER_OF_LOST_PACKETS@", data($lost_packets), "@" )
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                  declare variable $threshold as xs:positiveInteger* external;
                  let $lost_packets := *[matches(name(), ".*_DataStrip_ID")]/Image_Data_Info/Sensor_Configuration/Source_Packet_Description/Degradation_Summary/NUMBER_OF_LOST_PACKETS
                  let $bands_with_lost_packets := (
                     for $b in (0 to 12)
                        let $biggest := max(*[matches(name(), ".*_DataStrip_ID")]/Image_Data_Info/Sensor_Configuration/Source_Packet_Description/Source_Packet_Counters_List/Detector_List/Detector/Band_List/Band[@bandId=$b]/NB_OF_SOURCE_PACKETS )
                        let $band_number := (
                           if ($b < 8) then $b+1
                           else if ($b > 8) then $b
                           else concat($b,"A")
                        )
                        let $band := (
                           for $d in (1 to 12) 
                              let $det := *[matches(name(), ".*_DataStrip_ID")]/Image_Data_Info/Sensor_Configuration/Source_Packet_Description/Source_Packet_Counters_List/Detector_List/Detector[$d]/Band_List/Band[@bandId=$b]/NB_OF_SOURCE_PACKETS
                           where $det != $biggest
                           return concat("Detector_",$d, ": ", xs:integer($biggest) - $det,". ")			
                        )
                     where not(empty($band))
                     return
                        concat("@NUMBER_OF_LOST_SOURCE_PACKETS_IN_BAND_",$band_number,"@", string-join($band, ''), "@")
                  )
                  return
                     concat ("NUMBER_OF_LOST_PACKETS value ", data($lost_packets), " exceeds the threshold (", $threshold ,") ",
                        "@NUMBER_OF_LOST_PACKETS@", data($lost_packets), "@",
                        string-join($bands_with_lost_packets,''),
                        "@coment@The Bands criteria expressed in this section is B1-B12 + B8A@" )
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="checkSafeManifest">
      <amalfi:name>Safe Manifest check. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                     let $manifest := *[name()="manifest.safe"]
                     return
                     if (fn:empty ($manifest))
                     then
                        fn:false()
                     else
                        if (fn:data($manifest/@size)=0)
                        then
                           fn:false()
                        else   
                           if (fn:empty ($manifest/XFDU/*))
                           then
                              fn:false()
                           else
                              fn:true()
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                  "Safe manifest present."
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                  "Safe manifest not present or empty."
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="checkInventory">
      <amalfi:name>Inventory metadata file check. (,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                     let $metadata := *[name()="Inventory_Metadata.xml"]
                     return
                     if (fn:empty ($metadata))
                     then
                        fn:false()
                     else
                        if (fn:data($metadata/@size)=0)
                        then
                           fn:false()
                        else   
                           if (fn:empty ($metadata/Inventory_Metadata/*))
                           then
                              fn:false()
                           else
                              fn:true()
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                  "Inventory metadata file is present."
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                  "Inventory metadata file is not present or empty."
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="checkMetadata">
      <amalfi:name>Metadata file check. (@category:concluding,@thematic:FORMAT_CORRECTNESS,@thematic:SENSOR_QUALITY,@thematic:GENERAL_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                     let $metadata := *[matches (name(), "(S2._...._MTD_.*|MTD_..)\.xml")]
                     return
                     if (fn:empty ($metadata))
                     then
                        fn:false()
                     else
                        if (fn:data($metadata/@size)=0)
                        then
                           fn:false()
                        else   
                           if (fn:empty ($metadata/*[matches(name(), "(DIMAP_|)Level.*")]/*))
                           then
                              fn:false()
                           else
                              fn:true()
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                  "Metadata file is present."
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                  "Metadata file is not present or empty."
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="checkL2AImages">
      <amalfi:name>L2A images availability check. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                     let $tileB01 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B01.*\.jp2")]
                     let $tileB02 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B02.*\.jp2")]
                     let $tileB03 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B03.*\.jp2")]
                     let $tileB04 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B04.*\.jp2")]
                     let $tileB05 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B05.*\.jp2")]
                     let $tileB06 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B06.*\.jp2")]
                     let $tileB07 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B07.*\.jp2")]
                     let $tileB08 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B08.*\.jp2")]
                     let $tileB8A := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B8A.*\.jp2")]
                     let $tileB09 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B09.*\.jp2")]
                     let $tileB10 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B10.*\.jp2")]
                     let $tileB11 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B11.*\.jp2")]
                     let $tileB12 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B12.*\.jp2")]
                     let $tileAOT := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*AOT.*\.jp2")]
                     let $tileWVP := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*WVP.*\.jp2")]
                     let $tileSCL := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*SCL.*\.jp2")]
                     let $tileTCI := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*TCI.*\.jp2")]
                     return
                     if (fn:empty ($tileB01)
                         or fn:empty ($tileB02)
                         or fn:empty ($tileB03)
                         or fn:empty ($tileB04)
                         or fn:empty ($tileB05)
                         or fn:empty ($tileB06)
                         or fn:empty ($tileB07)
                         or fn:empty ($tileB08)
                         or fn:empty ($tileB8A)
                         or fn:empty ($tileB09)
                         (: or fn:empty ($tileB10)   B10 is not expected to be available in L2A products :)
                         or fn:empty ($tileB11)
                         or fn:empty ($tileB12)
                         or fn:empty ($tileAOT)
                         or fn:empty ($tileWVP)
                         or fn:empty ($tileSCL)
                         or fn:empty ($tileTCI)
                     )
                     then
                        fn:false()
                     else
                        fn:true()                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                  "All bands are present."
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                     let $tileB01 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B01.*\.jp2")]
                     let $tileB02 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B02.*\.jp2")]
                     let $tileB03 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B03.*\.jp2")]
                     let $tileB04 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B04.*\.jp2")]
                     let $tileB05 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B05.*\.jp2")]
                     let $tileB06 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B06.*\.jp2")]
                     let $tileB07 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B07.*\.jp2")]
                     let $tileB08 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B08.*\.jp2")]
                     let $tileB8A := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B8A.*\.jp2")]
                     let $tileB09 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B09.*\.jp2")]
                     let $tileB10 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B10.*\.jp2")]
                     let $tileB11 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B11.*\.jp2")]
                     let $tileB12 := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*B12.*\.jp2")]
                     let $tileAOT := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*AOT.*\.jp2")]
                     let $tileWVP := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*WVP.*\.jp2")]
                     let $tileSCL := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*SCL.*\.jp2")]
                     let $tileTCI := IMG_DATA/*[matches (name(), "R..m")]/*[matches (name(), ".*TCI.*\.jp2")]
                     return concat("Some bands are missing", 
                        (if (fn:empty ($tileB01)) then ", B01" else ""),
                        (if (fn:empty ($tileB02)) then ", B02" else ""),
                        (if (fn:empty ($tileB03)) then ", B03" else ""),
                        (if (fn:empty ($tileB04)) then ", B04" else ""),
                        (if (fn:empty ($tileB05)) then ", B05" else ""),
                        (if (fn:empty ($tileB06)) then ", B06" else ""),
                        (if (fn:empty ($tileB07)) then ", B07" else ""),
                        (if (fn:empty ($tileB08)) then ", B08" else ""),
                        (if (fn:empty ($tileB8A)) then ", B8A" else ""),
                        (if (fn:empty ($tileB09)) then ", B09" else ""),
                        (: (if (fn:empty ($tileB10)) then ", B10" else ""),  B10 is not expected to be available in L2A products :)
                        (if (fn:empty ($tileB11)) then ", B11" else ""),
                        (if (fn:empty ($tileB12)) then ", B12" else ""),
                        (if (fn:empty ($tileAOT)) then ", AOT" else ""),
                        (if (fn:empty ($tileWVP)) then ", WVP" else ""),
                        (if (fn:empty ($tileSCL)) then ", SCL" else ""),
                        (if (fn:empty ($tileTCI)) then ", TCI" else "")
                     )
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="checkL2AMasks">
      <amalfi:name>L2A Masks availability check. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                     let $classi := QI_DATA/*[matches (name(), ".*CLASSI.*\.jp2")]
                     let $qualit := QI_DATA/*[matches (name(), ".*QUALIT.*\.jp2")]
                     let $detfoo := QI_DATA/*[matches (name(), ".*DETFOO.*\.jp2")]
		     let $cloudp := QI_DATA/*[matches (name(), ".*CLDPRB.*\.jp2")]
                     let $snowpr := QI_DATA/*[matches (name(), ".*SNWPRB.*\.jp2")]
                     return
                     if (fn:count($classi) != 1
                         or fn:count($qualit) != 13
                         or fn:count($detfoo) != 13
                     )
                     then
                        fn:false()
                     else
                        fn:true()                 
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                  "All elements in QI_DATA are present."
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                     let $classi := QI_DATA/*[matches (name(), ".*MSK_CLASSI.*_B00.*\.jp2")]
                     let $qualit := QI_DATA/*[matches (name(), ".*MSK_QUALIT.*_B.*\.jp2")]
                     let $detfoo := QI_DATA/*[matches (name(), ".*MSK_DETFOO.*_B.*\.jp2")]
		     let $cloudp := QI_DATA/*[matches (name(), ".*MSK_CLDPRB_.*[2|6]0m.jp2")]
                     let $snowpr := QI_DATA/*[matches (name(), ".*MSK_SNWPRB_.*[2|6]0m.jp2")]
                     return concat("Some elements are missing in QI_DATA", 
                        (if (fn:count($classi) != 1) then ", MSK_CLASSI" else ""),
                        (if (fn:count($qualit) != 13) then ", MSK_QUALIT" else ""),
                        (if (fn:count($detfoo) != 13) then ", MSK_DETFOO" else ""),
                        (if (fn:count($cloudp) != 2) then ", MSK_CLDPRB" else ""),
                        (if (fn:count($snowpr) != 2) then ", MSK_SNWPRB" else "")						
                     )
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="testSize">
      <amalfi:name>Generic file size check. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="minSize">0</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                  declare variable $minSize as xs:positiveInteger* external;
                  @size>$minSize
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                  declare variable $minSize as xs:positiveInteger* external;
                  concat("File size (", @size , ") is greater than ", $minSize)
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                  declare variable $minSize as xs:positiveInteger* external;
                  concat("File size (", @size , ") is lower than ", $minSize)
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Corrupted_ISP">
      <amalfi:name>Check the consistency of the granules. (@category:concluding,@thematic:SENSOR_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold">0</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                   declare variable $threshold as xs:positiveInteger* external;
                   let $field_to_check := 
                         *[matches(name(), ".*_Granule_ID")]/
                         Quality_Indicators_Info/
                         Image_Content_QI/
                         Common_IMG_QI/
                         DEGRADED_MSI_DATA_PERCENTAGE
                   return
                   if (fn:empty ($field_to_check))
                   then
                      fn:true()
                   else
                      xs:double(data($field_to_check)) <= xs:double($threshold)
                   
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                  let $sps:=
                     *[matches(name(), ".*_Granule_ID")]/
                         Quality_Indicators_Info/
                         Image_Content_QI/
                         Source_Packet_description/
                         Lost_Source_Packet
                   return
                   if (fn:count ($sps)=0)
                   then
                      "No Error detected. @CORRUPTED_ISP@0@"
                   else
                      (
                         let $num := fn:count($sps)
                         return
                         concat ("Number of degraded ISP(s)=" , $num,
                            "  @CORRUPTED_ISP@", $num, "@ ",
                            fn:string-join ((
                               for $sp in $sps
                               return
                                  fn:concat (
                                     "@DEGRADATION_TYPE(", 
                                        data($sp/@band_Id), ",",
                                        data($sp/@detector_Id), ")@", 
                                     data($sp/DEGRADATION_TYPE), "@")), ' ')
                         )
                      )
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                  let $sps:=
                     *[matches(name(), ".*_Granule_ID")]/
                         Quality_Indicators_Info/
                         Image_Content_QI/
                         Source_Packet_description/
                         Lost_Source_Packet
                   return
                   if (fn:count ($sps)=0)
                   then
                      "Error detected but no corrupted list available in the product."
                   else
                      (
                         let $num := fn:count($sps)
                         return
                         concat ("Number of degraded ISP(s)=" , $num,
                            "  @CORRUPTED_ISP@", $num, "@ ",
                            fn:string-join ((
                               for $sp in $sps
                               return
                                  fn:concat (
                                     "@DEGRADATION_TYPE(", 
                                        data($sp/@band_Id), ",",
                                        data($sp/@detector_Id), ")@", 
                                     data($sp/DEGRADATION_TYPE), "@")), ' ')
                         )
                      )
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Degraded_SAD">
      <amalfi:name>Check the consistency of relative orbit. (@category:concluding,@thematic:SENSOR_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold">0</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                   declare variable $threshold as xs:positiveInteger* external;
                   let $field_to_check := *[matches(name(), ".*_DataStrip_ID")]/Quality_Indicators_Info/DEGRADED_ANC_DATA_PERCENTAGE
						 return						 
                   if (fn:empty ($field_to_check))
                   then
                      fn:false()
                   else
                      xs:double(data($field_to_check)) <= xs:double($threshold)

               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
                   "No Degraded SAD"
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                   declare variable $threshold as xs:positiveInteger* external;
                   let $field_to_check := *[matches(name(), ".*_DataStrip_ID")]/Quality_Indicators_Info/DEGRADED_ANC_DATA_PERCENTAGE
                   return
                   concat("SAD is degraded. @DEGRADED_SAD@", $field_to_check, "@")
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Sensing_Time">
      <amalfi:name>Check the consistency of the sensing time. (@category:concluding,@thematic:SENSOR_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                   let $field_to_check := *[matches(name(), ".*_(Granule|Tile)_ID")]/
                      General_Info/SENSING_TIME
                   return
                   if (fn:empty ($field_to_check))
                   then
                      fn:false()
                   else
                      fn:true()
                   
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                   let $field_to_check := 
                         *[matches(name(), ".*_(Granule|Tile)_ID")]/
                         General_Info/SENSING_TIME
                   return
                   concat ("Sensing time is valid ", 
                      "@SENSING_TIME@", data($field_to_check), "@")
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                  "Sensing time is invalid "
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Missing_Lines">
      <amalfi:name>Check the number of missing lines. (@category:concluding,@thematic:SENSOR_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold">0</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                   declare variable $threshold as xs:positiveInteger* external;
                   let $fields_to_check := *[matches(name(), ".*_Granule_ID")]/
                         Quality_Indicators_Info/
                         Image_Content_QI/
                         Source_Packet_description/
                         Lost_Source_Packet
                   return
                   if (fn:count ($fields_to_check)=0)
                   then
                      fn:true()
                   else
                   (
                      let $missings := 
                      (
                         for $field_to_check in $fields_to_check
                         let $missing_line_num := xs:integer(data ($field_to_check/NUMBER_OF_SP_ERROR))*16
                         where xs:integer($missing_line_num) >= xs:integer($threshold)
                         return
                            $missing_line_num
                      )
                      return 
                         fn:count($missings)=0
                   )
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                   declare variable $threshold as xs:positiveInteger* external;
                   let $fields_to_check := *[matches(name(), ".*_Granule_ID")]/
                      Quality_Indicators_Info/
                      Image_Content_QI/
                      Source_Packet_description/
                      Lost_Source_Packet
                   return
                   if (fn:count ($fields_to_check)=0)
                   then
                      "No missing lines @MISSING_LINES@0@"
                   else
                   (
                      let $missings := 
                      (
                         for $field_to_check in $fields_to_check
                         let $missing_line_num:=xs:integer(data ($field_to_check/NUMBER_OF_SP_ERROR))*16
                         let $degradation_type:=data ($field_to_check/DEGRADATION_TYPE)
                         return
                            concat (
                               "@MISSING_LINES(", 
                                  data($field_to_check/@band_Id), ",",
                                  data($field_to_check/@detector_Id), ")@", $missing_line_num, "@ ",
                               "@DEGRADATION_TYPE(", 
                                  data($field_to_check/@band_Id), ",",
                                  data($field_to_check/@detector_Id), ")@",$degradation_type , "@")
                      )
                      return 
                         if (fn:empty($missings))
                         then
                            "No missing lines @MISSING_LINES@0@"
                         else
                            concat (
                               "Number of missing lines does not exceeds the threshold (",
                                $threshold, ") ", string-join($missings, ' '))
                   )
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                  declare variable $threshold as xs:positiveInteger* external;
                   let $fields_to_check := *[matches(name(), ".*_Granule_ID")]/
                      Quality_Indicators_Info/
                      Image_Content_QI/
                      Source_Packet_description/
                      Lost_Source_Packet
                   let $missings := 
                   (
                      for $field_to_check in $fields_to_check
                      let $missing_line_num:=xs:integer(data ($field_to_check/NUMBER_OF_SP_ERROR))*16
                      let $degradation_type:=data ($field_to_check/DEGRADATION_TYPE)
                      return
                         concat (
                            "@MISSING_LINES(", 
                               data($field_to_check/@band_Id), ",",
                               data($field_to_check/@detector_Id), ")@",$missing_line_num, "@ ",
                            "@DEGRADATION_TYPE(", 
                               data($field_to_check/@band_Id), ",",
                               data($field_to_check/@detector_Id), ")@",$degradation_type , "@")
                   )
                   return 
                      concat (
                         "Number of missing lines exceeds the threshold (",
                                $threshold, ") ", string-join ($missings,' '))
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Degraded_Packets">
      <amalfi:name>Check the number of degraded packets (@category:concluding,@thematic:GENERAL_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold">0</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                   declare variable $threshold as xs:positiveInteger* external;
                   let $degraded_packets := *[matches(name(), ".*_DataStrip_ID")]/
                      Image_Data_Info/Sensor_Configuration/Source_Packet_Description/Degradation_Summary/NUMBER_OF_TOO_DEGRADED_PACKETS
                   return
                   if (fn:empty ($degraded_packets))
                   then
                      fn:true()
                   else
                      xs:double(data($degraded_packets)) <= xs:double($threshold)
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                  declare variable $threshold as xs:positiveInteger* external;
                  let $degraded_packets := *[matches(name(), ".*_DataStrip_ID")]/
                     Image_Data_Info/Sensor_Configuration/Source_Packet_Description/Degradation_Summary/NUMBER_OF_TOO_DEGRADED_PACKETS
                  return
                  if (fn:empty ($degraded_packets))
                  then
                     "NUMBER_OF_TOO_DEGRADED_PACKETS not found in dataset"
                  else
                     concat ("NUMBER_OF_TOO_DEGRADED_PACKETS value ", data($degraded_packets), " does not exceed the threshold (", $threshold ,") ",
                        "@NUMBER_OF_TOO_DEGRADED_PACKETS@", data($degraded_packets), "@" )
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                  declare variable $threshold as xs:positiveInteger* external;
                  let $degraded_packets := *[matches(name(), ".*_DataStrip_ID")]/
                     Image_Data_Info/Sensor_Configuration/Source_Packet_Description/Degradation_Summary/NUMBER_OF_TOO_DEGRADED_PACKETS
                  let $kept_degraded := *[matches(name(), ".*_DataStrip_ID")]/
                     Image_Data_Info/Sensor_Configuration/Source_Packet_Description/Degradation_Summary/NUMBER_OF_KEPT_DEGRADED_PACKETS
                  return
                     concat ("NUMBER_OF_TOO_DEGRADED_PACKETS value ", data($degraded_packets), " exceeds the threshold (", $threshold ,"). DEGRADED PACKETS KEPT: ", data($kept_degraded),
                        "@NUMBER_OF_LOST_PACKETS@", data($degraded_packets), "@",
                        "@NUMBER_OF_KEPT_DEGRADED_PACKETS@", data($kept_degraded), "@")
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Datation_Model_RMOY">
      <amalfi:name>Check the correctness of the Datation model with RMOY. (@category:concluding,@thematic:SENSOR_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold">6</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                   declare variable $threshold as xs:positiveInteger* external;
                   let $fields_to_check := *[matches(name(), ".*_DataStrip_ID")]/
                      Image_Data_Info/Sensor_Configuration/Time_Stamp/
                      Quality_Indicators/Global/RMOY
                   return
                   if (fn:empty ($fields_to_check))
                   then
                      fn:true()
                   else
                      xs:double(data($fields_to_check)) <= xs:double($threshold)
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                  declare variable $threshold as xs:positiveInteger* external;
                  let $fields_to_check := *[matches(name(), ".*_DataStrip_ID")]/
                     Image_Data_Info/Sensor_Configuration/Time_Stamp/
                     Quality_Indicators/Global/RMOY
                  return
                  if (fn:empty ($fields_to_check))
                  then
                     "RMOY not found in dataset"
                  else
                     concat ("RMOY value ", data($fields_to_check), 
                        " does not exceed the threshold (", $threshold ,") ",
                        "@RMOY@", data($fields_to_check), "@" )
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                  declare variable $threshold as xs:positiveInteger* external;
                  let $fields_to_check := *[matches(name(), ".*_DataStrip_ID")]/
                     Image_Data_Info/Sensor_Configuration/Time_Stamp/
                     Quality_Indicators/Global/RMOY
                  return
                     concat ("RMOY value ", data($fields_to_check), 
                        " exceeds the threshold (", $threshold ,") ",
                        "@RMOY@", data($fields_to_check), "@" )
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Datation_Model_GPS_SYNC">
      <amalfi:name>Check the correctness of the Datation model with GPS_SYNC. (@category:concluding,@thematic:SENSOR_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                   let $fields_to_check := *[matches(name(), ".*_DataStrip_ID")]/
                      Image_Data_Info/Sensor_Configuration/Time_Stamp/GPS_SYNC
                   return
                      xs:boolean($fields_to_check)
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                  "GPS is synchronized."
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                  "GPS is not synchronized."
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Orbit_Number_DOWNLINK">
      <amalfi:name>Check the consistency of downlink orbit number. (@category:concluding,@thematic:GENERAL_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold_min">1</parameter>
                  <parameter name="threshold_max">99999</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                   declare variable $threshold_min as xs:positiveInteger* external;
                   declare variable $threshold_max as xs:positiveInteger* external;
                   
                   let $fields_to_check := *[matches(name(), ".*_DataStrip_ID")]/
                      General_Info/Downlink_Info/DOWNLINK_ORBIT_NUMBER
                   return
                   if (fn:empty ($fields_to_check))
                   then
                      fn:false()
                   else
                      (xs:integer(data($fields_to_check)) > xs:integer($threshold_min)) and
                      (xs:integer(data($fields_to_check)) < xs:integer($threshold_max))
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                  declare variable $threshold_min as xs:positiveInteger* external;
                  declare variable $threshold_max as xs:positiveInteger* external;
                   
                  let $fields_to_check := *[matches(name(), ".*_DataStrip_ID")]/
                     General_Info/Downlink_Info/DOWNLINK_ORBIT_NUMBER
                  return
                     concat ("Downlink Orbit number (",data($fields_to_check),
                         ") is in range [", $threshold_min, ",", $threshold_max ,"] ",
                        "@DOWNLINK_ORBIT_NUMBER@", data($fields_to_check), "@" )
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                  declare variable $threshold_min as xs:positiveInteger* external;
                  declare variable $threshold_max as xs:positiveInteger* external;
                  let $fields_to_check := *[matches(name(), ".*_DataStrip_ID")]/
                     General_Info/Downlink_Info/DOWNLINK_ORBIT_NUMBER
                  return
                     if (fn:empty ($fields_to_check))
                     then
                        "Unknown downlink orbit number"
                     else
                        concat ("Downlink orbit number (",data($fields_to_check),
                         ") is not in range [", $threshold_min, ",", $threshold_max ,"] ",
                        "@DOWNLINK_ORBIT_NUMBER@", data($fields_to_check), "@" )
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Relative_Orbit_Number_SENSING">
      <amalfi:name>Check the consistency of relative imaging orbit number. (@category:concluding,@thematic:GENERAL_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold_min">1</parameter>
                  <parameter name="threshold_max">143</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                   declare variable $threshold_min as xs:positiveInteger* external;
                   declare variable $threshold_max as xs:positiveInteger* external;
                   
                   let $fields_to_check := *[matches(name(), ".*_DataStrip_ID")]/
                      General_Info/Datatake_Info/SENSING_ORBIT_NUMBER
                   return
                   if (fn:empty ($fields_to_check))
                   then
                      fn:false()
                   else
                      (xs:integer(data($fields_to_check)) >= xs:integer($threshold_min)) and
                      (xs:integer(data($fields_to_check)) <= xs:integer($threshold_max))
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                  declare variable $threshold_min as xs:positiveInteger* external;
                  declare variable $threshold_max as xs:positiveInteger* external;
                  let $fields_to_check := *[matches(name(), ".*_DataStrip_ID")]/
                     General_Info/Datatake_Info/SENSING_ORBIT_NUMBER
                  return
                     concat ("Sensing orbit number (",data($fields_to_check),
                         ") is in range [", $threshold_min, ",", $threshold_max ,"] ",
                        "@SENSING_ORBIT_NUMBER@", data($fields_to_check), "@" )
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                  declare variable $threshold_min as xs:positiveInteger* external;
                  declare variable $threshold_max as xs:positiveInteger* external;
                  let $fields_to_check := *[matches(name(), ".*_DataStrip_ID")]/
                     General_Info/Datatake_Info/SENSING_ORBIT_NUMBER
                  return
                     if (fn:empty ($fields_to_check))
                     then
                        "Unknown sensing orbit number."
                     else
                        concat ("Sensing orbit number (",data($fields_to_check),
                         ") is not in range [", $threshold_min, ",", $threshold_max ,"] ",
                        "@SENSING_ORBIT_NUMBER@", data($fields_to_check), "@" )
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Attitude_Quality_Indicator_Raw">
      <amalfi:name>Check the admissibility of Raw Attitude Quality Indicator. (@category:concluding,@thematic:GEOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="expected_indicators">"APRIORIATT|COARSEATT|UNCONFATT|VALIDATT"
                  </parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                   declare variable $expected_indicators as xs:string* external;
                   let $fields_to_check := *[matches(name(), ".*_DataStrip_ID")]/
                      Satellite_Ancillary_Data_Info/Attitudes/Raw_Attitudes/
                      STR_List/STR[1]/Attitude_Data_List/Attitude_Data
                      
                   let $attitude_count := count($fields_to_check)
                   let $step := $attitude_count/100
                   let $wrong_attitudes :=
                   (
                      for $attitude in $fields_to_check[position() mod $step = 0]
                      let $indicator := data($attitude/ATTITUDE_QUALITY)
                      where not(matches($indicator, $expected_indicators))
                      return $attitude
                   )
                   return empty ($wrong_attitudes)
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                  "No wrong raw attitude indicators were found."
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                  "Some wrong raw attitude indicators were found."
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Attitude_Quality_Indicator_Corrected">
      <amalfi:name>Check the admissibility of Corrected Attitude Quality Indicator. (@category:concluding,@thematic:GEOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="expected_indicators">"PROPAGATED|ONE_VALID_STR|TWO_VALID_STR"
                  </parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                   declare variable $expected_indicators as xs:string* external;
                   let $fields_to_check := *[matches(name(), ".*_DataStrip_ID")]/
                      Satellite_Ancillary_Data_Info/Attitudes/
                      Corrected_Attitudes/Values
                   let $attitude_count := count($fields_to_check)
                   let $step := $attitude_count/100
                   let $wrong_attitudes :=
                   (
                      for $attitude in $fields_to_check[position() mod $step = 0]
                      let $indicator := data($attitude/ATTITUDE_QUALITY_INDICATOR)
                      where not(matches($indicator, $expected_indicators))
                      return $attitude
                   )
                   return empty ($wrong_attitudes)
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                  "No wrong corrected attitude indicators were found."
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                  "Some wrong corrected attitude indicators were found."
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Start_Stop_Time">
      <amalfi:name>Check start/stop time validity. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                   let $start := *[matches(name(), ".*_DataStrip_ID")]/
                      General_Info/Datastrip_Time_Info/DATASTRIP_SENSING_START
                   let $stop := *[matches(name(), ".*_DataStrip_ID")]/
                      General_Info/Datastrip_Time_Info/DATASTRIP_SENSING_STOP
                   return 
                      data($start) <= data($stop)
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                  let $start := *[matches(name(), ".*_DataStrip_ID")]/
                     General_Info/Datastrip_Time_Info/DATASTRIP_SENSING_START
                  let $stop := *[matches(name(), ".*_DataStrip_ID")]/
                     General_Info/Datastrip_Time_Info/DATASTRIP_SENSING_STOP
                  return 
                  concat (
                     "Sensing period is valid. ",
                        "@SENSING_START@",$start,"@ ",
                        "@SENSING_STOP@",$stop,"@")
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                  let $start := *[matches(name(), ".*_DataStrip_ID")]/
                     General_Info/Datastrip_Time_Info/DATASTRIP_SENSING_START
                  let $stop := *[matches(name(), ".*_DataStrip_ID")]/
                     General_Info/Datastrip_Time_Info/DATASTRIP_SENSING_STOP
                  return 
                  concat (
                     "Sensing period is invalid. ",
                        "@SENSING_START@",$start,"@ ",
                        "@SENSING_STOP@",$stop,"@")
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Granule_Dimensions_10m">
      <amalfi:name>Check the 10m consistency of granules/tiles. (@category:concluding,@thematic:GEOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                  let $meta_size := *[matches (name(), "(MTD_TL\.xml|\w{8}_MTD_L1[ABC]_.*\.xml)")]/ 
                     *[matches(name(),"Level-.._(Granule|Tile)_ID")]/Geometric_Info/
							*[matches(name(), "(Granule_Dimensions|Tile_Geocoding)")]/Size[@resolution="10"]
                  let $granules1 := IMG_DATA/*[matches (name(), ".*_(B02|B03|B04|B08)\.jp2")]
                  let $granules2 := IMG_DATA/R10m/*[matches (name(), ".*_10m\.jp2")]
                  let $granules := ($granules1, $granules2)
                  (: 10 m :)
                  let $error := 
                     for $granule in $granules
                     where not(
                        xs:integer($granule/image/directory/Width) = xs:integer($meta_size/NCOLS) and
                        xs:integer($granule/image/directory/Height) = xs:integer($meta_size/NROWS))
                     return
                        "true"
                  return 
                    fn:empty($error)
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                  "10m resolution granules/tiles dimensions are correct."
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                  let $meta_size := *[matches (name(), "(MTD_TL\.xml|\w{8}_MTD_L1[ABC]_.*\.xml)")]/
                     *[matches(name(),"Level-.._(Granule|Tile)_ID")]/Geometric_Info/
                     *[matches(name(), "(Granule_Dimensions|Tile_Geocoding)")]/Size[@resolution="10"]
                  let $granules1 := IMG_DATA/*[matches (name(), ".*_(B02|B03|B04|B08)\.jp2")]
                  let $granules2 := IMG_DATA/R10m/*[matches (name(), ".*_10m\.jp2")]
                  let $granules := ($granules1, $granules2)
                  (: 10 m :)
                  return
                  concat ("Wrong 10m resolution granules/tiles dimensions. ",
                     "@EXPECTED@",  data($meta_size/NCOLS), ",", 
                                     data($meta_size/NROWS), "@ ",
                     string-join (
                        for $granule in $granules
                        where not(
                           xs:integer($granule/image/directory/Width)=xs:integer($meta_size/NCOLS) and
                           xs:integer($granule/image/directory/Height)=xs:integer($meta_size/NROWS))
                        return
									let $band := fn:replace(name($granule), ".*_(B02|B03|B04|B08).jp2", "$1")
                           return
                              concat ("@BAND(", $band, ")@", 
                                 data($granule/image/directory/Width), ",",
                                 data($granule/image/directory/Height), "@ "), ' '))
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Granule_Dimensions_20m">
      <amalfi:name>Check the 20m consistency of granules/tiles. (@category:concluding,@thematic:GEOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                  let $meta_size := *[matches (name(), "(MTD_TL\.xml|\w{8}_MTD_L1[ABC]_.*\.xml)")]/
                    *[matches(name(),"Level-.._(Granule|Tile)_ID")]/Geometric_Info/
                     *[matches(name(), "(Granule_Dimensions|Tile_Geocoding)")]/Size[@resolution="20"]
                  let $granules1 := IMG_DATA/*[matches (name(), ".*_(B05|B06|B07|B8A|B11|B12)\.jp2")]
                  let $granules2 := IMG_DATA/R20m/*[matches (name(), ".*_20m\.jp2")]
                  let $granules := ($granules1, $granules2)
                  (: 20 m :)
                  let $error := 
                     for $granule in $granules
                     where not(
                        xs:integer($granule/image/directory/Width)=xs:integer($meta_size/NCOLS) and
                        xs:integer($granule/image/directory/Height)=xs:integer($meta_size/NROWS))
                     return
                        "true"
                  return 
                    fn:empty($error)                  
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                  "20m resolution granules/tiles dimensions are correct."
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                  let $meta_size := *[matches (name(), "(MTD_TL\.xml|\w{8}_MTD_L1[ABC]_.*\.xml)")]/
                     *[matches(name(),"Level-.._(Granule|Tile)_ID")]/Geometric_Info/
                     *[matches(name(), "(Granule_Dimensions|Tile_Geocoding)")]/Size[@resolution="20"]          
                  let $granules1 := IMG_DATA/*[matches (name(), ".*_(B05|B06|B07|B8A|B11|B12)\.jp2")]
                  let $granules2 := IMG_DATA/R20m/*[matches (name(), ".*_20m\.jp2")]
                  let $granules := ($granules1, $granules2)
                  (: 20 m :)                  
                  return
                  concat ("Wrong 20m resolution granules/tiles dimensions. ",
                     "@EXPECTED@",  data($meta_size/NCOLS), ",", 
                                     data($meta_size/NROWS), "@ ",
                     string-join (
                        for $granule in $granules
                        where not(
                           xs:integer($granule/image/directory/Width)=xs:integer($meta_size/NCOLS) and 
                           xs:integer($granule/image/directory/Height)=xs:integer($meta_size/NROWS))
                        return
									let $band := fn:replace(name($granule), ".*_(B05|B06|B07|B8A|B11|B12).jp2", "$1")
                           return
                              concat ("@BAND(", $band, ")@", 
                                 data($granule/image/directory/Width), ",",
                                 data($granule/image/directory/Height), "@ "), ' '))               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Granule_Dimensions_60m">
      <amalfi:name>Check the 60m consistency of granules/tiles. (@category:concluding,@thematic:GEOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                  let $meta_size := *[matches (name(), "(MTD_TL\.xml|\w{8}_MTD_L1[ABC]_.*\.xml)")]/
                     *[matches(name(),"Level-.._(Granule|Tile)_ID")]/Geometric_Info/
                     *[matches(name(), "(Granule_Dimensions|Tile_Geocoding)")]/Size[@resolution="60"]
                  let $granules1 := IMG_DATA/*[matches (name(), ".*_(B01|B09|B10)\.jp2")]
                  let $granules2 := IMG_DATA/R60m/*[matches (name(), ".*_60m\.jp2")]
                  let $granules := ($granules1, $granules2)
                  (: 60 m :)
                  let $error := 
                     for $granule in $granules
                     where not(
                        xs:integer($granule/image/directory/Width) = xs:integer($meta_size/NCOLS) and
                        xs:integer($granule/image/directory/Height) = xs:integer($meta_size/NROWS))
                     return
                        "true"
                  return 
                    fn:empty($error)
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                  "60m resolution granules/tiles dimensions are correct."
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                  let $meta_size := *[matches (name(), "(MTD_TL\.xml|\w{8}_MTD_L1[ABC]_.*\.xml)")]/
                     *[matches(name(),"Level-.._(Granule|Tile)_ID")]/Geometric_Info/
                     *[matches(name(), "(Granule_Dimensions|Tile_Geocoding)")]/Size[@resolution="60"]
                  let $granules1 := IMG_DATA/*[matches (name(), ".*_(B01|B09|B10)\.jp2")]
                  let $granules2 := IMG_DATA/R60m/*[matches (name(), ".*_60m\.jp2")]
                  let $granules := ($granules1, $granules2)
                  (: 60 m :)
                  return
                  concat ("Wrong 60m resolution granules/tiles dimensions. ",
                     "@EXPECTED@",  data($meta_size/NCOLS), ",", 
                                     data($meta_size/NROWS), "@ ",
                     string-join (
                        for $granule in $granules
                        where not (
                           xs:integer($granule/image/directory/Width) = xs:integer($meta_size/NCOLS) and
                           xs:integer($granule/image/directory/Height) = xs:integer($meta_size/NROWS))
                        return
									let $band := fn:replace(name($granule), ".*_(B01|B09|B10).jp2", "$1")
                           return
                              concat ("@BAND(", $band, ")@", 
                                 data($granule/image/directory/Width), ",",
                                 data($granule/image/directory/Height), "@ "), ' '))
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Granule_Footprint">
      <amalfi:name>Check the consistency of footprint. (@category:concluding,@thematic:GEOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold">1.5</parameter>
                  <parameter name="width">1.5</parameter>
                  <parameter name="height">1.5</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                     declare variable $threshold as xs:double* external;
                     declare variable $width as xs:double* external;
                     declare variable $height as xs:double* external;
                     
                     declare function local:trim ($arg as xs:string) as xs:string
                     {
                        replace(replace(replace($arg,'\s+$',''),'^\s+',''), '\s+', ' ')
                     };
                     declare function local:formatFootprintExt ($footprint as xs:string) as xs:string*
                     {
                        let $list := fn:tokenize ($footprint, " ")
                        return
                           for $coord at $position in $list
                           where (($position - 1) mod 3)=0
                           return
                              concat ($list[$position]," ",$list[$position+1]," ",$list[$position+2])
                     };
                     
                     declare function local:convertCoord ($point as xs:string) as xs:double*
                     {
                        let $tk := fn:tokenize ($point, " ") 
                        let $lat := $tk[1]
                        let $lon := $tk[2]
                        let $alt := $tk[3]
                        return
                           (xs:double($lat),xs:double($lon), xs:double($alt)) 
                     };
                     
                     declare function local:ul ($footprint as xs:string*) as xs:double*
                     {
                        local:convertCoord ($footprint[1])
                     };
                     
                     declare function local:ll ($footprint as xs:string*) as xs:double*
                     {
                        local:convertCoord ($footprint[2])
                     };
                     
                     declare function local:lr ($footprint as xs:string*) as xs:double*
                     {
                        local:convertCoord ($footprint[3])
                     };

                     declare function local:ur ($footprint as xs:string*) as xs:double*
                     {
                        local:convertCoord ($footprint[4])
                     };
                     
                     declare function local:distance ($p1 as xs:double*, $p2 as xs:double*)
                     {
                        math:sqrt(math:power($p2[1]-$p1[1],2)+math:power(fn:min((fn:abs($p2[2]-$p1[2]),360-fn:abs($p2[2]-$p1[2]))),2))
                     };
                     
                     declare function local:toString ($p1 as xs:double*)
                     {
                        concat ("(",$p1[1], ",", $p1[2], ", ", $p1[3],")")
                     };
                     
                     let $footprint_ext := fn:data(*[matches(name(), ".*_Granule_ID")]/
                        Geometric_Info/Granule_Footprint/Granule_Footprint/Footprint/EXT_POS_LIST)
                        
                     let $footprint_int := fn:data(*[matches(name(), ".*_Granule_ID")]/
                        Geometric_Info/Granule_Footprint/Granule_Footprint/Footprint/INT_POS_LIST)
                     
                     let $footprint := 
                     ( 
                        if (fn:empty($footprint_int))
                        then
                           if (fn:empty($footprint_ext)) then ()
                           else local:formatFootprintExt(local:trim($footprint_ext)) 
                        else $footprint_int
                     )
                     (:
                     let $dummy5 := trace ("", concat ("Distance ul ", local:toString(local:ul($footprint))))
                     let $dummy6 := trace ("", concat ("Distance ll ", local:toString(local:ll($footprint))))
                     let $dummy7 := trace ("", concat ("Distance lr ", local:toString(local:lr($footprint))))
                     let $dummy8 := trace ("", concat ("Distance ur ", local:toString(local:ur($footprint))))
                     
                     let $dummy1 := trace ("", concat ("Distance ul->ur ",local:distance (local:ul($footprint), local:ur($footprint))))
                     let $dummy2 := trace ("", concat ("Distance ll->lr ",local:distance (local:ll($footprint), local:lr($footprint))))
                     let $dummy3 := trace ("", concat ("Distance ul->ll ",local:distance (local:ul($footprint), local:ll($footprint))))
                     let $dummy4 := trace ("", concat ("Distance ur->lr ",local:distance (local:ur($footprint), local:lr($footprint))))

                     let $dummy9 := trace ("", concat ("Distance ul->ur - width ",math:abs(local:distance (local:ul($footprint), local:ur($footprint))-$width)))
                     let $dummy10 := trace ("", concat ("Distance ll->lr - width ",math:abs(local:distance (local:ll($footprint), local:lr($footprint))-$width)))
                     let $dummy11 := trace ("", concat ("Distance ul->ll - width ",math:abs(local:distance (local:ul($footprint), local:ll($footprint))-$height)))
                     let $dummy12 := trace ("", concat ("Distance ur->lr - width ",math:abs(local:distance (local:ur($footprint), local:lr($footprint))-$height)))

                     :)

                     let $dummy12 := math:abs(local:distance (local:ur($footprint), local:lr($footprint))-$height)

                     return
                        if (empty($footprint))
                        then
                           xs:boolean ("false")
                        else
                           (math:abs(local:distance (local:ul($footprint), local:ur($footprint))-$width) < $threshold) and
                           (math:abs(local:distance (local:ll($footprint), local:lr($footprint))-$width) < $threshold) and
                           (math:abs(local:distance (local:ul($footprint), local:ll($footprint))-$height) < $threshold) and
                           (math:abs(local:distance (local:ur($footprint), local:lr($footprint))-$height) < $threshold)
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                     declare variable $threshold as xs:double* external;
                     declare function local:trim ($arg as xs:string) as xs:string
                     {
                        replace(replace(replace($arg,'\s+$',''),'^\s+',''), '\s+', ' ')
                     };
                     declare function local:formatFootprintExt ($footprint as xs:string) as xs:string*
                     {
                        let $list := fn:tokenize ($footprint, " ")
                        return
                           for $coord at $position in $list
                           where (($position - 1) mod 3)=0
                           return
                              concat ($list[$position]," ",$list[$position+1]," ",$list[$position+2])
                     };
                     
                     declare function local:convertCoord ($point as xs:string) as xs:double*
                     {
                        let $tk := fn:tokenize ($point, " ") 
                        let $lat := $tk[1]
                        let $lon := $tk[2]
                        let $alt := $tk[3]
                        return
                           (xs:double($lat),xs:double($lon), xs:double($alt)) 
                     };
                     
                     declare function local:ul ($footprint as xs:string*) as xs:double*
                     {
                        local:convertCoord ($footprint[1])
                     };
                     
                     declare function local:ll ($footprint as xs:string*) as xs:double*
                     {
                        local:convertCoord ($footprint[2])
                     };
                     
                     declare function local:lr ($footprint as xs:string*) as xs:double*
                     {
                        local:convertCoord ($footprint[3])
                     };

                     declare function local:ur ($footprint as xs:string*) as xs:double*
                     {
                        local:convertCoord ($footprint[4])
                     };
                     
                     declare function local:distance ($p1 as xs:double*, $p2 as xs:double*)
                     {
                        math:sqrt(math:power($p2[1]-$p1[1],2)+math:power(fn:min((fn:abs($p2[2]-$p1[2]),360-fn:abs($p2[2]-$p1[2]))),2))
                     };
                     
                     declare function local:toString ($p1 as xs:double*)
                     {
                        concat ($p1[1], ",", $p1[2], ", ", $p1[3])
                     };
                     
                     
                     let $footprint_ext := fn:data(*[matches(name(), ".*_Granule_ID")]/
                        Geometric_Info/Granule_Footprint/Granule_Footprint/Footprint/EXT_POS_LIST)
                     let $footprint_int := fn:data(*[matches(name(), ".*_Granule_ID")]/
                        Geometric_Info/Granule_Footprint/Granule_Footprint/Footprint/INT_POS_LIST)
                     
                     let $footprint := 
                     (
                        if (fn:empty ($footprint_int))
                        then
                           if (fn:empty($footprint_ext)) then ()
                           else local:formatFootprintExt(local:trim($footprint_ext)) 
                        else $footprint_int
                     )
                     return
                        concat ("Footprint is valid.",
                           "@UL@", local:toString(local:ul($footprint)), "@ ",
                           "@LL@", local:toString(local:ll($footprint)), "@ ",
                           "@LR@", local:toString(local:lr($footprint)), "@ ",
                           "@UR@", local:toString(local:ur($footprint)), "@ ",
                           "@DISTANCE(UL,UR)@", local:distance (local:ul($footprint), local:ur($footprint)), "@ ",
                           "@DISTANCE(LL,LR)@", local:distance (local:ll($footprint), local:lr($footprint)), "@ ",
                           "@DISTANCE(UL,LL)@", local:distance (local:ul($footprint), local:ll($footprint)), "@ ",
                           "@DISTANCE(UR,LR)@", local:distance (local:ur($footprint), local:lr($footprint)), "@ ")
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                     declare variable $threshold as xs:double* external;
                     declare function local:trim ($arg as xs:string) as xs:string
                     {
                        replace(replace(replace($arg,'\s+$',''),'^\s+',''), '\s+', ' ')
                     };
                     declare function local:formatFootprintExt ($footprint as xs:string) as xs:string*
                     {
                        let $list := fn:tokenize ($footprint, " ")
                        return
                           for $coord at $position in $list
                           where (($position - 1) mod 3)=0
                           return
                              concat ($list[$position]," ",$list[$position+1]," ",$list[$position+2])
                     };
                     
                     declare function local:convertCoord ($point as xs:string) as xs:double*
                     {
                        let $tk := fn:tokenize ($point, " ") 
                        let $lat := $tk[1]
                        let $lon := $tk[2]
                        let $alt := $tk[3]
                        return
                           (xs:double($lat),xs:double($lon), xs:double($alt)) 
                     };
                     
                     declare function local:ul ($footprint as xs:string*) as xs:double*
                     {
                        local:convertCoord ($footprint[1])
                     };
                     
                     declare function local:ll ($footprint as xs:string*) as xs:double*
                     {
                        local:convertCoord ($footprint[2])
                     };
                     
                     declare function local:lr ($footprint as xs:string*) as xs:double*
                     {
                        local:convertCoord ($footprint[3])
                     };

                     declare function local:ur ($footprint as xs:string*) as xs:double*
                     {
                        local:convertCoord ($footprint[4])
                     };
                     
                     declare function local:distance ($p1 as xs:double*, $p2 as xs:double*)
                     {
                        math:sqrt(math:power($p2[1]-$p1[1],2)+math:power(fn:min((fn:abs($p2[2]-$p1[2]),360-fn:abs($p2[2]-$p1[2]))),2))
                     };
                     
                     declare function local:toString ($p1 as xs:double*)
                     {
                        concat ("(",$p1[1], ",", $p1[2], ", ", $p1[3],")")
                     };
                     
                     
                     let $footprint_ext := fn:data(*[matches(name(), ".*_Granule_ID")]/
                        Geometric_Info/Granule_Footprint/Granule_Footprint/Footprint/EXT_POS_LIST)
                     let $footprint_int := fn:data(*[matches(name(), ".*_Granule_ID")]/
                        Geometric_Info/Granule_Footprint/Granule_Footprint/Footprint/INT_POS_LIST)
                     
                     let $footprint := 
                        if (fn:empty ($footprint_int))
                        then
                           if (fn:empty($footprint_ext)) then ()
                           else local:formatFootprintExt(local:trim($footprint_ext)) 
                        else $footprint_int
                     return
                        if (empty($footprint))
                        then
                           "No footprint found in this product."
                        else
                           concat ("Footprint is invalid.",
                              "@UL@", local:toString(local:ul($footprint)), "@ ",
                              "@LL@", local:toString(local:ll($footprint)), "@ ",
                              "@LR@", local:toString(local:lr($footprint)), "@ ",
                              "@UR@", local:toString(local:ur($footprint)), "@ ",
                              "@DISTANCE(UL,UR)@", local:distance (local:ul($footprint), local:ur($footprint)), "@ ",
                              "@DISTANCE(LL,LR)@", local:distance (local:ll($footprint), local:lr($footprint)), "@ ",
                              "@DISTANCE(UL,LL)@", local:distance (local:ul($footprint), local:ll($footprint)), "@ ",
                              "@DISTANCE(UR,LR)@", local:distance (local:ur($footprint), local:lr($footprint)), "@ ")
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Solar_Angle_Azimuth">
      <amalfi:name>Check the azimuth solar angle. (@category:concluding,@thematic:GEOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold">360</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double(*[matches(name(), ".*_(Granule|Tile)_ID")]/
                        Geometric_Info//*[matches(name(), "Solar_Angles|Mean_Sun_Angle")]/AZIMUTH_ANGLE)
                     return
                        $value>0 and $value<$threshold
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double(*[matches(name(), ".*_(Granule|Tile)_ID")]/
                        Geometric_Info//*[matches(name(), "Solar_Angles|Mean_Sun_Angle")]/AZIMUTH_ANGLE)
                     return
                        concat ("Azimuth solar angle (", $value, 
                           ") is in the limit of the threshold (", $threshold, ") ",
                           "@EXPECTED@", $threshold, "@",
                           "@SOLAR_AZIMUTH_ANGLE@", $value, "@")
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double(*[matches(name(), ".*_(Granule|Tile)_ID")]/
                        Geometric_Info//*[matches(name(), "Solar_Angles|Mean_Sun_Angle")]/AZIMUTH_ANGLE)
                     return
                        if (empty ($value)) then "Solar azimuth angle not found."
                        else
                        concat ("Azimuth solar angle (", $value, 
                           ") is out of the threshold limit (", $threshold, ") ",
                           "@EXPECTED@", $threshold, "@",
                           "@SOLAR_AZIMUTH_ANGLE@", $value, "@")
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Solar_Angle_Zenith">
      <amalfi:name>Check the zenith solar angle. (@category:concluding,@thematic:GENERAL_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold">180</parameter>
                  <parameter name="l1_threshold">82</parameter>
                  <parameter name="l2a_threshold">70</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double(*[matches(name(), ".*_(Granule|Tile)_ID")]/
                        Geometric_Info//*[matches(name(), "Solar_Angles|Mean_Sun_Angle")]/ZENITH_ANGLE)
                     return
                        $value>0 and $value<$threshold
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                     declare variable $l1_threshold as xs:double* external;
                     declare variable $l2a_threshold as xs:double* external;
                     let $value := xs:double(*[matches(name(), ".*_(Granule|Tile)_ID")]/
                        Geometric_Info//*[matches(name(), "Solar_Angles|Mean_Sun_Angle")]/ZENITH_ANGLE)
                     let $tile_id := xs:string(*[matches(name(), ".*_(Granule|Tile)_ID")]/
                        General_Info//*[matches(name(), "(TILE|GRANULE)_ID")])
                     return
                     if (matches($tile_id, ".*_L2A_.*"))
                     then
                        if ($value > $l2a_threshold)
                        then
                           concat ("WARNING: Zenith solar angle (", $value, 
                           ") is above recommended Level-2 threshold limit (", $l2a_threshold, "). Please see the L2A Data Quality Report for more information.",
                           "@EXPECTED@", $l2a_threshold, "@",
                           "@SOLAR_ZENITH_ANGLE@", $value, "@")
                        else
                           concat ("Zenith solar angle (", $value, 
                           ") is within the threshold limit (", $l2a_threshold, ") ",
                           "@EXPECTED@", $l2a_threshold, "@",
                           "@SOLAR_ZENITH_ANGLE@", $value, "@")
                     else
                        if ($value > $l1_threshold)
                        then
                           concat ("WARNING: Zenith solar angle (", $value, 
                           ") is above recommended threshold limit (", $l1_threshold, "). Please see the L1C Data Quality Report for more information.",
                           "@EXPECTED@", $l1_threshold, "@",
                           "@SOLAR_ZENITH_ANGLE@", $value, "@")
                        else
                           concat ("Zenith solar angle (", $value, 
                           ") is within the threshold limit (", $l1_threshold, ") ",
                           "@EXPECTED@", $l1_threshold, "@",
                           "@SOLAR_ZENITH_ANGLE@", $value, "@")

               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double(*[matches(name(), ".*_(Granule|Tile)_ID")]/
                        Geometric_Info//*[matches(name(), "Solar_Angles|Mean_Sun_Angle")]/ZENITH_ANGLE)
                     return
                        if (empty ($value)) then "Solar zenith angle not found."
                        else 
                           concat ("Zenith solar angle (", $value, 
                           ") is out of the threshold limit (", $threshold, ") ",
                           "@EXPECTED@", $threshold, "@",
                           "@SOLAR_ZENITH_ANGLE@", $value, "@")
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Incidence_Angle_Azimuth">
      <amalfi:name>Check the azimuth incidence angle. (@category:concluding,@thematic:GEOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold">360</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double((*[matches(name(), ".*_(Granule|Tile)_ID")]/
                        Geometric_Info//*[matches(name(), "Incidence_Angles|Mean_Viewing_Incidence_Angle")])[1]/AZIMUTH_ANGLE)
                     return
                        $value>0 and $value<$threshold
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double((*[matches(name(), ".*_(Granule|Tile)_ID")]/
                        Geometric_Info//*[matches(name(), "Incidence_Angles|Mean_Viewing_Incidence_Angle")])[1]/AZIMUTH_ANGLE)
                     return
                        concat ("Azimuth incidence angle (", $value, 
                           ") is in the limit of the threshold (", $threshold, ") ",
                           "@EXPECTED@", $threshold, "@",
                           "@INCIDENCE_AZIMUTH_ANGLE@", $value, "@")
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double((*[matches(name(), ".*_(Granule|Tile)_ID")]/
                        Geometric_Info//*[matches(name(), "Incidence_Angles|Mean_Viewing_Incidence_Angle")])[1]/AZIMUTH_ANGLE)
                     return
                        if (empty ($value)) then "Azimuth incidence angle not found."
                        else 
                        concat ("Azimuth incidence angle (", $value, 
                           ") is out of the threshold limit (", $threshold, ") ",
                           "@EXPECTED@", $threshold, "@",
                           "@INCIDENCE_AZIMUTH_ANGLE@", $value, "@")
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Incidence_Angle_Zenith">
      <amalfi:name>Check the zenith incidence angle. (@category:concluding,@thematic:GEOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold">180</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double((*[matches(name(), ".*_(Granule|Tile)_ID")]/
                        Geometric_Info//*[matches(name(), "Incidence_Angles|Mean_Viewing_Incidence_Angle")])[1]/ZENITH_ANGLE)
                     return
                        $value>0 and $value<$threshold
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double((*[matches(name(), ".*_(Granule|Tile)_ID")]/
                        Geometric_Info//*[matches(name(), "Incidence_Angles|Mean_Viewing_Incidence_Angle")])[1]/ZENITH_ANGLE)
                     return
                        concat ("Zenith incidence angle (", $value, 
                           ") is in the limit of the threshold (", $threshold, ") ",
                           "@EXPECTED@", $threshold, "@",
                           "@INCIDENCE_ZENITH_ANGLE@", $value, "@")
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double((*[matches(name(), ".*_(Granule|Tile)_ID")]/
                        Geometric_Info//*[matches(name(), "Incidence_Angles|Mean_Viewing_Incidence_Angle")])[1]/ZENITH_ANGLE)
                     return
                        if (empty ($value)) then "Zenith incidence angle not found."
                        else
                        concat ("Zenith incidence angle (", $value, 
                           ") is out of the threshold limit (", $threshold, ") ",
                           "@EXPECTED@", $threshold, "@",
                           "@INCIDENCE_ZENITH_ANGLE@", $value, "@")
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Perc_Cloud_Coverage">
      <amalfi:name>Check the percentage of cloud coverage. (,@thematic:GENERAL_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold">5</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double(*[matches(name(), ".*_(Granule|Tile)_ID")]/
                        Quality_Indicators_Info/Image_Content_QI/CLOUDY_PIXEL_PERCENTAGE)
                     return
                        $value<$threshold
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double(*[matches(name(), ".*_(Granule|Tile)_ID")]/
                        Quality_Indicators_Info/Image_Content_QI/CLOUDY_PIXEL_PERCENTAGE)
                     return
                        concat ("Cloudy pixel percentage(", $value, 
                           ") is lower than the threshold (", $threshold, ") ",
                           "@EXPECTED@", $threshold, "@",
                           "@CLOUDY_PERCENTAGE@", $value, "@")
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double(*[matches(name(), ".*_(Granule|Tile)_ID")]/
                        Quality_Indicators_Info/Image_Content_QI/CLOUDY_PIXEL_PERCENTAGE)
                     return
                        concat ("Cloudy pixel percentage(", $value, 
                           ") exceeds the threshold (", $threshold, ") ",
                           "@EXPECTED@", $threshold, "@",
                           "@CLOUDY_PERCENTAGE@", $value, "@")
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Processor_Version">
      <amalfi:name>Check the processor version. (@category:concluding,@thematic:GENERAL_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  (: WARNING: This inspection requires that 
                     class fr.gael.olqc.item.GipProbas to be in the
                     classpath otherwise an error will be raised for this
                     check. :) 
                  declare namespace gip_probas="java:fr.gael.olqc.item.GipProbas";

                  let $value := fn:data(*[matches(name(), "Level.*_ID")]/
                     General_Info/Processing_Info/PROCESSING_BASELINE)
                        
                  let $baseline := gip_probas:getBaselineVersion()
                     
                  return
                     if (empty ($value))
                     then
                        fn:false()
                     else
                        $value = $baseline
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
                     let $value := fn:data(*[matches(name(), "Level.*_ID")]/
                        General_Info/Processing_Info/PROCESSING_BASELINE)
                     return
                        concat ("Processor version is valid (", 
                           $value, ") @PROCESSOR_VERSION@", $value, "@")
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                  declare namespace gip_probas="java:fr.gael.olqc.item.GipProbas";

                  let $value := fn:data(*[matches(name(), "Level.*_ID")]/
                        General_Info/Processing_Info/PROCESSING_BASELINE)
                  
                  let $baseline := gip_probas:getBaselineVersion()
                  
                  return
                  if (empty ($value))
                  then
                     concat ("Processor version is invalid (version is empty, ", 
                              "expected value: " , $baseline , ") ", 
                              "@PROCESSOR_VERSION@empty@ ",
                              "@EXPECTED@", $baseline, "@")
                        else
                           concat ("Processor version is invalid (found:", 
                              $value, ", expected value: " , $baseline , ") ",
                              "@PROCESSOR_VERSION@", $value, "@ ",
                              "@EXPECTED@", $baseline, "@")
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Ephemeris_Quality">
      <amalfi:name>Check the ephemeris quality value. (@category:concluding,@thematic:GEOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold">20</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double(*[matches(name(), ".*_DataStrip_ID")]/
                        Quality_Indicators_Info/Geometric_Info//EPHEMERIS_QUALITY)
                     return
                        $value <= $threshold
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double(*[matches(name(), ".*_DataStrip_ID")]/
                        Quality_Indicators_Info/Geometric_Info//EPHEMERIS_QUALITY)
                     return
                     concat ("Ephemeris quality is valid (", 
                        $value, "<=", $threshold, ") @VALUE@", $value, "@ @EXPECTED@", $threshold, "@")
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double(*[matches(name(), ".*_DataStrip_ID")]/
                        Quality_Indicators_Info/Geometric_Info//EPHEMERIS_QUALITY)
                     return
                     concat ("Ephemeris quality is invalid (", 
                        $value, ">", $threshold, ") @VALUE@", $value, "@ @EXPECTED@", $threshold, "@")
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Planimetric_Stability">
      <amalfi:name>Check the planimetric stability value  (@category:concluding,@thematic:GEOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold">5</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double(*[matches(name(), ".*_DataStrip_ID")]/
                        Quality_Indicators_Info/Geometric_Info//Planimetric_Stability/VALUE)
                     return
                        $value < $threshold
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double(*[matches(name(), ".*_DataStrip_ID")]/
                        Quality_Indicators_Info/Geometric_Info//Planimetric_Stability/VALUE)
                     return
                     concat ("Planimetric stability is valid (", 
                        $value, "<", $threshold, ") @VALUE@", $value, "@ @EXPECTED@", $threshold, "@")
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double(*[matches(name(), ".*_DataStrip_ID")]/
                        Quality_Indicators_Info/Geometric_Info//Planimetric_Stability/VALUE)
                     return
                     concat ("Planimetric stability is invalid (", 
                        $value, ">", $threshold, ") @VALUE@", $value, "@ @EXPECTED@", $threshold, "@")
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Absolute_Location_Value">
      <amalfi:name>Check the absolute Location value. (@category:concluding,@thematic:GEOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="threshold">30</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double(*[matches(name(), ".*_DataStrip_ID")]/
                        Quality_Indicators_Info/Geometric_Info//Absolute_Location/VALUE)
                     return
                        $value < $threshold
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double(*[matches(name(), ".*_DataStrip_ID")]/
                        Quality_Indicators_Info/Geometric_Info//Absolute_Location/VALUE)
                     return
                     concat ("Absolute location is valid (", 
                        $value, "<", $threshold, ") @VALUE@", $value, "@ @EXPECTED@", $threshold, "@")
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                     declare variable $threshold as xs:double* external;
                     let $value := xs:double(*[matches(name(), ".*_DataStrip_ID")]/
                        Quality_Indicators_Info/Geometric_Info//Absolute_Location/VALUE)
                     return
                     concat ("Absolute location is invalid (", 
                        $value, ">", $threshold, ") @VALUE@", $value, "@ @EXPECTED@", $threshold, "@")
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="List_Fake_Decompressed_Source_Frames">
      <amalfi:name>Check list of fake decompressed sources frames  (@category:concluding,@thematic:GENERAL_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                     let $fakes := *[matches(name(), ".*_DataStrip_ID")]/
                        Image_Data_Info/List_Fake_Decompr_Source_Frames
                     
                     (: 10m :)
                     let $list10m := (
                        for $fake at $position in $fakes
                           where
                           (
                              $position = 2 or
                              $position = 3 or
                              $position = 4 or
                              $position = 8
                           )
                           return
                              let $first  := fn:data($fake/FIRST)
                              let $number := fn:data($fake/NUMBER_SOURCE)
                              let $last   := $first + $number
                              return
                                 if (($first > 0 and $first <= 144) and 
                                     ($last  > 0 and $last  <= 144))
                                 then 0
                                 else 1
                     )
                     (: 20m :)
                     let $list20m := (
                        for $fake at $position in $fakes
                           where
                           (
                              $position = 5 or
                              $position = 6 or
                              $position = 7 or
                              $position = 9 or (: 8A :)
                              $position = 12 or
                              $position = 13
                              
                           )
                           return
                              let $first  := $fake/FIRST
                              let $number := $fake/NUMBER_SOURCE
                              let $last   := $first + $number
                              return
                                 if (($first > 0 and $first <= 72) and 
                                     ($last  > 0 and $last  <= 72))
                                 then 0
                                 else 1
                     )
                     (: 60m :)
                     let $list60m := ( 
                        for $fake at $position in $fakes
                           where
                           (
                              $position = 1 or
                              $position = 10 or
                              $position = 11
                           )
                           return
                              let $first  := xs:positiveInteger ($fake/FIRST)
                              let $number := xs:positiveInteger ($fake/NUMBER_SOURCE)
                              let $last   := $first + $number
                              return
                                 if (($first >= 0 and $first <= 24) and 
                                     ($last  >= 0 and $last  <= 24))
                                 then 0
                                 else 1
                     )
                     
                     let $ok10m := if (fn:empty ($list10m)) then fn:true() else (fn:sum ($list10m)=0)
                     let $ok20m := if (fn:empty ($list20m)) then fn:true() else (fn:sum ($list20m)=0) 
                     let $ok60m := if (fn:empty ($list60m)) then fn:true() else (fn:sum ($list60m)=0)
                     
                     return
                        $ok10m and $ok20m and $ok60m
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               
                  let $fakes := *[matches(name(), ".*_DataStrip_ID")]/
                        Image_Data_Info/List_Fake_Decompr_Source_Frames
                  return
                  concat ("Fake decompressed source frames are valid. ",
                   string-join ((  
                     for $fake at $position in $fakes
                     return
                        let $first  := xs:positiveInteger ($fake/FIRST)
                        let $number := xs:positiveInteger ($fake/NUMBER_SOURCE)
                        let $last   := $first + $number
                        return
                        concat ('@LAST(', $position, ')@', $last, '@')), ' ')
                  )
               
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               
                  let $fakes := *[matches(name(), ".*_DataStrip_ID")]/
                        Image_Data_Info/List_Fake_Decompr_Source_Frames
                  return
                  concat ("Fake decompressed source frames are invalid. ",
                   string-join ((  
                     for $fake at $position in $fakes
                     return
                        let $first  := xs:positiveInteger ($fake/FIRST)
                        let $number := xs:positiveInteger ($fake/NUMBER_SOURCE)
                        let $last   := $first + $number
                        return
                        concat ('@LAST(', $position, ')@', $last, '@')), ' ')
                  )
               
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Radiometric_Quality_Indicators_Absolute">
      <amalfi:name>Check on the Radiometric Quality Indicators : Absolute Calibration Accuracy. (@category:concluding,@thematic:RADIOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="max_accuracy">5</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  declare variable $max_accuracy as xs:double* external;
                  let $error_bands := (
                     for $band in *[matches(name(), ".*_DataStrip_ID")]/
                        Quality_Indicators_Info/Radiometric_Info/
                        Radiometric_Quality_List/Radiometric_Quality
                     where xs:double($band/ABSOLUTE_CALIBRATION_ACCURACY) > $max_accuracy
                     return $band
                  )
                  return fn:empty($error_bands)
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
                 "Absolute calibration accuracy is correct."
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                 declare variable $max_accuracy as xs:double* external;
                 let $error_bands := (
                    for $band in *[matches(name(), ".*_DataStrip_ID")]/
                       Quality_Indicators_Info/Radiometric_Info/
                       Radiometric_Quality_List/Radiometric_Quality
                    where xs:double($band/ABSOLUTE_CALIBRATION_ACCURACY) > $max_accuracy
                    return 
                       concat ('@BAND(', $band/@bandId, ")@", $band/ABSOLUTE_CALIBRATION_ACCURACY, "@")
                  )
                  return
                     concat ("Absolute calibration accuracy exceeds the threshold.",
                        '@MAX_ACCURACY@', $max_accuracy, '@ ',
                        string-join($error_bands, " "))
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Radiometric_Quality_Indicators_Cross_Band">
      <amalfi:name>Check on the Radiometric Quality Indicators : Cross Band Calibration Accuracy. (@category:concluding,@thematic:RADIOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="max_accuracy">5</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  declare variable $max_accuracy as xs:double* external;
                  let $error_bands := (
                     for $band in *[matches(name(), ".*_DataStrip_ID")]/
                        Quality_Indicators_Info/Radiometric_Info/
                        Radiometric_Quality_List/Radiometric_Quality
                     where xs:double($band/CROSS_BAND_CALIBRATION_ACCURACY) > $max_accuracy
                     return $band
                  )
                  return fn:empty($error_bands)
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
                 "Cross band calibration accuracy is correct."
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                 declare variable $max_accuracy as xs:double* external;
                 let $error_bands := (
                    for $band in *[matches(name(), ".*_DataStrip_ID")]/
                       Quality_Indicators_Info/Radiometric_Info/
                       Radiometric_Quality_List/Radiometric_Quality
                    where xs:double($band/CROSS_BAND_CALIBRATION_ACCURACY) > $max_accuracy
                    return 
                       concat ('@BAND(', $band/@bandId, ")@", $band/CROSS_BAND_CALIBRATION_ACCURACY, "@")
                  )
                  return
                     concat ("Cross band calibration accuracy exceeds the threshold.",
                        '@MAX_ACCURACY@', $max_accuracy, '@ ',
                        string-join($error_bands, " "))
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Radiometric_Quality_Indicators_Multi_Temporal">
      <amalfi:name>Check on the Radiometric Quality Indicators : Multi-Temporal Calibration Accuracy. (@category:concluding,@thematic:RADIOMETRIC_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="max_accuracy">5</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  declare variable $max_accuracy as xs:double* external;
                  let $error_bands := (
                     for $band in *[matches(name(), ".*_DataStrip_ID")]/
                        Quality_Indicators_Info/Radiometric_Info/
                        Radiometric_Quality_List/Radiometric_Quality
                     where xs:double($band/MULTI_TEMPORAL_CALIBRATION_ACCURACY) > $max_accuracy
                     return $band
                  )
                  return fn:empty($error_bands)
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
                 "Multi-temporal calibration accuracy is correct."
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                 declare variable $max_accuracy as xs:double* external;
                 let $error_bands := (
                    for $band in *[matches(name(), ".*_DataStrip_ID")]/
                       Quality_Indicators_Info/Radiometric_Info/
                       Radiometric_Quality_List/Radiometric_Quality
                    where xs:double($band/MULTI_TEMPORAL_CALIBRATION_ACCURACY) > $max_accuracy
                    return 
                       concat ('@BAND(', $band/@bandId, ")@", $band/MULTI_TEMPORAL_CALIBRATION_ACCURACY, "@")
                  )
                  return
                     concat ("Multi-temporal calibration accuracy exceeds the threshold.",
                        '@MAX_ACCURACY@', $max_accuracy, '@ ',
                        fn:string-join($error_bands, " "))
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Tile_Position_Geoposition">
      <amalfi:name>Check of consistency of Tile Position by Geoposition. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="max_x">900000.0</parameter>
                  <parameter name="min_x">99900.0</parameter>
                  <parameter name="max_y">20000000.0</parameter>
                  <parameter name="min_y">0.0</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
               
                  declare variable $max_y as xs:double* external;
                  declare variable $min_y as xs:double* external;

                  declare variable $max_x as xs:double* external;
                  declare variable $min_x as xs:double* external;
                  
                  (: projection is always considered as UTM so unit is always metre :)
                  let $res_10m := *[matches(name(),"Level-.._Tile_ID")]/Geometric_Info/
                     Tile_Geocoding/Geoposition[@resolution=10]
                  let $ulx_10m := $res_10m/ULX
                  let $uly_10m := $res_10m/ULY
                  let $xdim_10m := $res_10m/XDIM
                  let $ydim_10m := $res_10m/YDIM
                     
                  let $res_20m := *[matches(name(),"Level-.._Tile_ID")]/Geometric_Info/
                     Tile_Geocoding/Geoposition[@resolution=20]
                  let $ulx_20m := $res_20m/ULX
                  let $uly_20m := $res_20m/ULY
                  let $xdim_20m := $res_20m/XDIM
                  let $ydim_20m := $res_20m/YDIM
                    
                  let $res_60m := *[matches(name(),"Level-.._Tile_ID")]/Geometric_Info/
                     Tile_Geocoding/Geoposition[@resolution=60]
                  let $ulx_60m := $res_60m/ULX
                  let $uly_60m := $res_60m/ULY
                  let $xdim_60m := $res_60m/XDIM
                  let $ydim_60m := $res_60m/YDIM
                 
                  return
                     xs:double($ulx_10m) < $max_x and
                     xs:double($ulx_10m) > $min_x and
                     xs:double($uly_10m) < $max_y and
                     xs:double($uly_10m) > $min_y and
                     xs:double($xdim_10m)=10.0    and
                     xs:double($ydim_10m)=-10.0   and
                     xs:double($ulx_20m) < $max_x and
                     xs:double($ulx_20m) > $min_x and
                     xs:double($uly_20m) < $max_y and
                     xs:double($uly_20m) > $min_y and
                     xs:double($xdim_20m)=20.0    and
                     xs:double($ydim_20m)=-20.0   and
                     xs:double($ulx_60m) < $max_x and
                     xs:double($ulx_60m) > $min_x and
                     xs:double($uly_60m) < $max_y and
                     xs:double($uly_60m) > $min_y and
                     xs:double($xdim_60m)=60.0    and
                     xs:double($ydim_60m)=-60.0
                 
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
                  let $res_10m := *[matches(name(),"Level-.._Tile_ID")]/Geometric_Info/
                     Tile_Geocoding/Geoposition[@resolution=10]
                  let $ulx_10m := $res_10m/ULX
                  let $uly_10m := $res_10m/ULY
                  let $xdim_10m := $res_10m/XDIM
                  let $ydim_10m := $res_10m/YDIM
                     
                  let $res_20m := *[matches(name(),"Level-.._Tile_ID")]/Geometric_Info/
                     Tile_Geocoding/Geoposition[@resolution=20]
                  let $ulx_20m := $res_20m/ULX
                  let $uly_20m := $res_20m/ULY
                  let $xdim_20m := $res_20m/XDIM
                  let $ydim_20m := $res_20m/YDIM
                    
                  let $res_60m := *[matches(name(),"Level-.._Tile_ID")]/Geometric_Info/
                     Tile_Geocoding/Geoposition[@resolution=60]
                  let $ulx_60m := $res_60m/ULX
                  let $uly_60m := $res_60m/ULY
                  let $xdim_60m := $res_60m/XDIM
                  let $ydim_60m := $res_60m/YDIM
                 
                  return
                     concat ("Tile geoposition is valid.",
                        '@ULX(10)@', $ulx_10m , '@ ',
                        '@ULY(10)@', $uly_10m , '@ ',
                        '@XDIM(10)@', $xdim_10m , '@ ',
                        '@YDIM(10)@', $ydim_10m , '@ ',
                        '@ULX(20)@', $ulx_20m , '@ ',
                        '@ULY(20)@', $uly_20m , '@ ',
                        '@XDIM(20)@', $xdim_20m , '@ ',
                        '@YDIM(20)@', $ydim_20m , '@ ',
                        '@ULX(60)@', $ulx_60m , '@ ',
                        '@ULY(60)@', $uly_60m , '@ ',
                        '@XDIM(60)@', $xdim_60m , '@ ',
                        '@YDIM(60)@', $ydim_60m , '@')
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                  declare variable $max_y as xs:double* external;
                  declare variable $min_y as xs:double* external;
                  declare variable $max_x as xs:double* external;
                  declare variable $min_x as xs:double* external;
                  
                  let $res_10m := *[matches(name(),"Level-.._Tile_ID")]/Geometric_Info/
                     Tile_Geocoding/Geoposition[@resolution=10]
                  let $ulx_10m := $res_10m/ULX
                  let $uly_10m := $res_10m/ULY
                  let $xdim_10m := $res_10m/XDIM
                  let $ydim_10m := $res_10m/YDIM
                     
                  let $res_20m := *[matches(name(),"Level-.._Tile_ID")]/Geometric_Info/
                     Tile_Geocoding/Geoposition[@resolution=20]
                  let $ulx_20m := $res_20m/ULX
                  let $uly_20m := $res_20m/ULY
                  let $xdim_20m := $res_20m/XDIM
                  let $ydim_20m := $res_20m/YDIM
                    
                  let $res_60m := *[matches(name(),"Level-.._Tile_ID")]/Geometric_Info/
                     Tile_Geocoding/Geoposition[@resolution=60]
                  let $ulx_60m := $res_60m/ULX
                  let $uly_60m := $res_60m/ULY
                  let $xdim_60m := $res_60m/XDIM
                  let $ydim_60m := $res_60m/YDIM
                 
                  return
                  concat ("Tile geopisition is invalid.",
                     '@MAX_Y@', $max_y, '@ ',
                     '@MIN_Y@', $min_y, '@ ',
                     '@MAX_X@', $max_x, '@ ',
                     '@MIN_X@', $min_x, '@ ',
                     '@ULX(10)@', $ulx_10m , '@ ',
                     '@ULY(10)@', $uly_10m , '@ ',
                     '@XDIM(10)@', $xdim_10m , '@ ',
                     '@YDIM(10)@', $ydim_10m , '@ ',
                     '@ULX(20)@', $ulx_20m , '@ ',
                     '@ULY(20)@', $uly_20m , '@ ',
                     '@XDIM(20)@', $xdim_20m , '@ ',
                     '@YDIM(20)@', $ydim_20m , '@ ',
                     '@ULX(60)@', $ulx_60m , '@ ',
                     '@ULY(60)@', $uly_60m , '@ ',
                     '@XDIM(60)@', $xdim_60m , '@ ',
                     '@YDIM(60)@', $ydim_60m , '@')
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Tile_Position_Size">
      <amalfi:name>Check of consistency of Tile Position by Size. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:queryParameters>
                  <parameter name="epsilon">10000.0</parameter>
               </amalfi:queryParameters>
               <amalfi:query><![CDATA[
                  declare variable $epsilon as xs:double* external;
                  (: math:abs sometimes unexpectedly returns NaN :)
                  declare function local:abs ($value)
                  {
                     let $v := xs:double ($value)
                     return
                        if ($v<0) then $v*-1
                        else $v
                  };
                  
                  let $size_10m := *[matches(name(),"Level-.._Tile_ID")]/
                     Geometric_Info/Tile_Geocoding/Size[@resolution="10"]
                     
                  let $xdim_10m := *[matches(name(),"Level-.._Tile_ID")]/Geometric_Info/
                     Tile_Geocoding/Geoposition[@resolution=10]/XDIM
                  let $ydim_10m := *[matches(name(),"Level-.._Tile_ID")]/Geometric_Info/
                     Tile_Geocoding/Geoposition[@resolution=10]/YDIM
                  
                  let $image_width_10m  := local:abs(xs:double($ydim_10m)*xs:double($size_10m/NCOLS))   
                  let $image_height_10m := local:abs(xs:double($xdim_10m)*xs:double($size_10m/NROWS)) 

                  let $size_20m := *[matches(name(),"Level-.._Tile_ID")]/
                     Geometric_Info/Tile_Geocoding/Size[@resolution="20"]
                     
                  let $xdim_20m := *[matches(name(),"Level-.._Tile_ID")]/Geometric_Info/
                     Tile_Geocoding/Geoposition[@resolution=20]/XDIM
                  let $ydim_20m := *[matches(name(),"Level-.._Tile_ID")]/Geometric_Info/
                     Tile_Geocoding/Geoposition[@resolution=20]/YDIM
                  
                  let $image_width_20m  := local:abs(xs:double($ydim_20m)*xs:double($size_20m/NCOLS))   
                  let $image_height_20m := local:abs(xs:double($xdim_20m)*xs:double($size_20m/NROWS)) 

                  let $size_60m := *[matches(name(),"Level-.._Tile_ID")]/
                     Geometric_Info/Tile_Geocoding/Size[@resolution="60"]
                     
                  let $xdim_60m := *[matches(name(),"Level-.._Tile_ID")]/Geometric_Info/
                     Tile_Geocoding/Geoposition[@resolution=60]/XDIM
                  let $ydim_60m := *[matches(name(),"Level-.._Tile_ID")]/Geometric_Info/
                     Tile_Geocoding/Geoposition[@resolution=60]/YDIM
                  
                  let $image_width_60m  := local:abs(xs:double($ydim_60m)*xs:double($size_60m/NCOLS))   
                  let $image_height_60m := local:abs(xs:double($xdim_60m)*xs:double($size_60m/NROWS)) 
                  
                  return
                     $image_width_10m >= (100000.0-$epsilon)  and
                     $image_width_10m <  (100000.0+$epsilon)  and
                     $image_height_10m >= (100000.0-$epsilon) and
                     $image_height_10m <  (100000.0+$epsilon) and
                     $image_width_20m >= (100000.0-$epsilon)  and
                     $image_width_20m <  (100000.0+$epsilon)  and
                     $image_height_20m >= (100000.0-$epsilon) and
                     $image_height_20m <  (100000.0+$epsilon) and
                     $image_width_60m >= (100000.0-$epsilon)  and
                     $image_width_60m <  (100000.0+$epsilon)  and
                     $image_height_60m >= (100000.0-$epsilon) and
                     $image_height_60m <  (100000.0+$epsilon)
               
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
                 declare variable $epsilon as xs:double* external;
                 concat ('Tile image size is between [', 
                    (100000-$epsilon), ',', (100000+$epsilon), '].')
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                 declare variable $epsilon as xs:double* external;
                 (: math:abs sometimes unexpectedly returns NaN :)
                 declare function local:abs ($value)
                 {
                    let $v := xs:double ($value)
                    return
                       if ($v<0) then $v*-1
                       else $v
                 };
                 
                 let $size_10m := *[matches(name(),"Level-.._Tile_ID")]/
                     Geometric_Info/Tile_Geocoding/Size[@resolution="10"]
                     
                  let $xdim_10m := *[matches(name(),"Level-.._Tile_ID")]/Geometric_Info/
                     Tile_Geocoding/Geoposition[@resolution=10]/XDIM
                  let $ydim_10m := *[matches(name(),"Level-.._Tile_ID")]/Geometric_Info/
                     Tile_Geocoding/Geoposition[@resolution=10]/YDIM
                  
                  let $image_width_10m  := local:abs(xs:double($ydim_10m)*xs:double($size_10m/NCOLS))   
                  let $image_height_10m := local:abs(xs:double($xdim_10m)*xs:double($size_10m/NROWS))
                  
                  let $size_20m := *[matches(name(),"Level-.._Tile_ID")]/
                     Geometric_Info/Tile_Geocoding/Size[@resolution="20"]
                     
                  let $xdim_20m := *[matches(name(),"Level-.._Tile_ID")]/Geometric_Info/
                     Tile_Geocoding/Geoposition[@resolution=20]/XDIM
                  let $ydim_20m := *[matches(name(),"Level-.._Tile_ID")]/Geometric_Info/
                     Tile_Geocoding/Geoposition[@resolution=20]/YDIM
                  
                  let $image_width_20m  := local:abs(xs:double($ydim_20m)*xs:double($size_20m/NCOLS))   
                  let $image_height_20m := local:abs(xs:double($xdim_20m)*xs:double($size_20m/NROWS)) 

                  let $size_60m := *[matches(name(),"Level-.._Tile_ID")]/
                     Geometric_Info/Tile_Geocoding/Size[@resolution="60"]
                     
                  let $xdim_60m := *[matches(name(),"Level-.._Tile_ID")]/Geometric_Info/
                     Tile_Geocoding/Geoposition[@resolution=60]/XDIM
                  let $ydim_60m := *[matches(name(),"Level-.._Tile_ID")]/Geometric_Info/
                     Tile_Geocoding/Geoposition[@resolution=60]/YDIM
                  
                  let $image_width_60m  := local:abs(xs:double($ydim_60m)*xs:double($size_60m/NCOLS))   
                  let $image_height_60m := local:abs(xs:double($xdim_60m)*xs:double($size_60m/NROWS)) 
                  
                  return
                    concat ('Tile image size is greater than range [', 
                       (100000-$epsilon), ',', (100000+$epsilon), '].',
                       '@EPSILON@', $epsilon, '@ ',
                       '@WIDTH(10)@', $image_width_10m, '@ ',
                       '@HEIGHT(10)@', $image_height_10m, '@ ',
                       '@WIDTH(20)@', $image_width_20m, '@ ',
                       '@HEIGHT(20)@', $image_height_20m, '@ ',
                       '@WIDTH(60)@', $image_width_60m, '@ ',
                       '@HEIGHT(60)@', $image_height_60m, '@ ')
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="PVI_and_TCI">
      <amalfi:name>Check of consistency of PVI  (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                    let $pvi_file := QI_DATA/*[matches (name(), "(.*_PVI\.jp2|S2[A-D]_OPER_PVI.*\.jp2)")]
                    return
                       not (fn:empty ($pvi_file)) and
                       $pvi_file[1]/@size > 0
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
                  "PVI file is consistent."
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                  "PVI files are empty or missing."
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Ecmwf">
      <amalfi:name>ECMWF data conformity and completeness check  (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                    AUX_DATA/*[matches (name (), "(AUX_ECMWFT|S2[A-D]_OPER_AUX_ECMWF.*)")]
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
                 "ECMWF file is present."
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                 "ECMWF file is missing."
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Aux_Cams">
      <amalfi:name>AUX_CAMS data conformity and completeness check  (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                    let $aux_cams := AUX_DATA/*[matches (name(), "(AUX_CAMS.*|S2[A-D]_OPER_AUX_CAMS.*)")]
                    return
                       not (fn:empty ($aux_cams)) and
                       $aux_cams[1]/@size > 0
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
                 "AUX_CAMS file is present."
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                 "AUX_CAMS file is empty or missing."
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="acquisitionPeriodExists">
      <amalfi:name>Checks if Acquisition Period is present. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                     fn:not(empty(*[matches (name(),"(?i)manifest.safe")]/XFDU/
                        metadataSection/metadataObject[@ID="acquisitionPeriod"]))
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
                  "Acquisition Period exists."
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                  "Acquisition Period mandatory metadata is not present."
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="processingExists">
      <amalfi:name>Checks if Processing metadata is present. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                     fn:not(empty(*[matches (name(),"(?i)manifest.safe")]/XFDU/
                        metadataSection/metadataObject[@ID="processing"]))
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
                  "Processing exists."
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                  "Processing mandatory metadata is not present."
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="acquisitionPeriodCategory">
      <amalfi:name>Checks if Acquisition Period Category is correctly defined. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                     "DMD" = (*[matches (name(),"(?i)manifest.safe")]/XFDU/
                        metadataSection/metadataObject[@ID="acquisitionPeriod"]/@category)
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
                  "Acquisition Period Category is Ok."
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
                  concat("Acquisition Period Category is ", (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/metadataObject[
                     @ID="acquisitionPeriod"]/@category), " instead of DMD.")
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="acquisitionPeriodClassification">
      <amalfi:name>Checks if Acquisition Period Classification is correctly defined. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                     "DESCRIPTION" = (*[matches (name(),"(?i)manifest.safe")]/XFDU/
                        metadataSection/metadataObject[@ID="acquisitionPeriod"]/@classification)
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
                  "Acquisition Period Classification is Ok."
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
                  concat("Acquisition Period Classification is ",(*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/metadataObject[
                     @ID="acquisitionPeriod"]/@classification)," instead of DESCRIPTION.")
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="processingCategory">
      <amalfi:name>Checks if Processing Category is correctly defined. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                     "PDI" = (*[matches (name(),"(?i)manifest.safe")]/XFDU/
                        metadataSection/metadataObject[@ID="processing"]/@category)
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
                  "Processing Category is Ok."
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
                  fn:concat("Processing Category is ",(*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/metadataObject[
                     @ID="processing"]/@category)," instead of PDI.")
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="processingClassification">
      <amalfi:name>Checks if Processing Classification is correctly defined. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                     "PROVENANCE" = (*[matches (name(),"(?i)manifest.safe")]/XFDU/
                        metadataSection/metadataObject[@ID="processing"]/@classification)
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
                  "Processing Classification is Ok."
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
                  fn:concat("Processing Classification is ",(*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/metadataObject[
                     @ID="processing"]/@classification)," instead of PROVENANCE.")
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="platformCategory">
      <amalfi:name>Checks if Platform Category is correctly defined. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                     "DMD" = (*[matches (name(),"(?i)manifest.safe")]/XFDU/
                        metadataSection/metadataObject[@ID="platform"]/@category)
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
                  "Platform Category is Ok."
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
                  fn:concat("Platform Category is ",(*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/metadataObject[
                     @ID="platform"]/@category)," instead of DMD.")
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="platformClassification">
      <amalfi:name>Checks if Platform Classification is correctly defined. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                     "DESCRIPTION" = (*[matches (name(),"(?i)manifest.safe")]/XFDU/
                        metadataSection/metadataObject[@ID="platform"]/@classification)
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
                  "Platform Classification is Ok."
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
                  fn:concat("Platform Classification is ",(*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/metadataObject[
                     @ID="platform"]/@classification)," instead of DESCRIPTION.")
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="schemaCategory">
      <amalfi:name>Checks if Schema Category is correctly defined. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                  if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     fn:false()
                  else
                  let $check := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                           where matches($mds/@ID,".*Schema")                  
                            return "true"
                            
                  let $result := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)
                           where matches($mds/@ID,".*Schema")                     
                            return $mds/@category = "REP"
                            
                  return count($result) = 0 or $result = $check
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)      
                        where matches($mds/@ID,".*Schema")            
                         return $mds/@ID
                         
               return if (count($result) = 0)
                  then "No Index classification in product."
                  else concat("Category ok for : ", string-join($result, ", "))
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                        where matches($mds/@ID,".*Schema") and not(matches($mds/@category,"REP"))
                         return $mds/@ID
               
               return concat("Category not ok for : ", string-join($result, ", "))
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="schemaClassification">
      <amalfi:name>Checks if Schema Classification is correctly defined. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                  if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     fn:false()
                  else
                  let $check := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                           where matches($mds/@ID,".*Schema")                  
                            return "true"
                            
                  let $result := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)
                           where matches($mds/@ID,".*Schema")                     
                            return $mds/@classification = "SYNTAX"
                            
                  return count($result) = 0 or $result = $check
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)      
                        where matches($mds/@ID,".*Schema")                   
                         return $mds/@ID
                         
               return if (count($result) = 0)
                  then "No Index classification in product."
                  else concat("Classification ok for : ", string-join($result, ", "))    
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                        where matches($mds/@ID,".*Schema") and not(matches($mds/@classification, 
                           "SYNTAX"))
                           return $mds/@ID
                        
               return concat("Classification not ok for : ", string-join($result, ", "))
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="annotationCategory">
      <amalfi:name>Checks if Annotation Category is correctly defined. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                  if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     fn:false()
                  else
                  let $check := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                           where matches($mds/@ID,".*Annotation")                  
                            return "true"
                            
                  let $result := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)
                           where matches($mds/@ID,".*Annotation")                     
                            return $mds/@category = "DMD"
               
                  return count($result) = 0 or $result = $check
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)      
                        where matches($mds/@ID,".*Annotation")            
                        return $mds/@ID
                        
               return if (count($result) = 0)
                  then "No Index classification in product."
                  else concat("Category ok for : ", string-join($result, ", "))
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                        where matches($mds/@ID,".*Annotation") and not(matches($mds/@category,"DMD"))
                        return $mds/@ID
                        
               return concat("Category not ok for : ", string-join($result, ", "))
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="annotationClassification">
      <amalfi:name>Checks if Annotation Classification is correctly defined. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                  if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     fn:false()
                  else
                  let $check := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                           where matches($mds/@ID,".*Annotation")                  
                            return "true"
                            
                  let $result := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)
                           where matches($mds/@ID,".*Annotation")                     
                            return $mds/@classification = "DESCRIPTION"
                            
                  return count($result) = 0 or $result = $check
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)      
                        where matches($mds/@ID,".*Annotation")                   
                         return $mds/@ID
                         
               return if (count($result) = 0)
                  then "No Index classification in product."
                  else concat("Classification ok for : ", string-join($result, ", "))    
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                        where matches($mds/@ID,".*Annotation") and not(matches($mds/@classification, 
                           "DESCRIPTION"))
                           return $mds/@ID
               
               return concat("Classification not ok for : ", string-join($result, ", "))
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="frameSetCategory">
      <amalfi:name>Checks if MeasurementFrameSet Category is correctly defined. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                  if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     fn:false()
                  else
                  let $check := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                           where matches($mds/@ID,".*FrameSet")                  
                            return "true"
                            
                  let $result := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)
                           where matches($mds/@ID,".*FrameSet")                     
                            return $mds/@category = "DMD"
                            
                  return count($result) = 0 or $result = $check
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)      
                        where matches($mds/@ID,".*FrameSet")            
                        return $mds/@ID
                        
               return if (count($result) = 0)
                  then "No Index classification in product."
                  else concat("Category ok for : ", string-join($result, ", "))
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                        where matches($mds/@ID,".*FrameSet") and not(matches($mds/@category,"DMD"))
                        return $mds/@ID
                        
               return concat("Category not ok for : ", string-join($result, ", "))
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="frameSetClassification">
      <amalfi:name>Checks if MeasurementFrameSet Classification is correctly defined. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                  if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     fn:false()
                  else
                  let $check := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                           where matches($mds/@ID,".*FrameSet")                  
                           return "true"
                        
                  let $result := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)
                           where matches($mds/@ID,".*FrameSet")                     
                           return $mds/@classification = "DESCRIPTION"
               
                  return count($result) = 0 or $result = $check
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)      
                        where matches($mds/@ID,".*FrameSet")                   
                        return $mds/@ID
                        
               return if (count($result) = 0)
                  then "No Index classification in product."
                  else concat("Classification ok for : ", string-join($result, ", "))    
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                        where matches($mds/@ID,".*FrameSet") and not(matches($mds/@classification, 
                           "DESCRIPTION"))
                           return $mds/@ID
               
               return concat("Classification not ok for : ", string-join($result, ", "))
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="gridReferenceCategory">
      <amalfi:name>Checks if Grid Reference Category is correctly defined. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                  if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     fn:false()
                  else
                  let $check := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                           where matches($mds/@ID,".*GridReference")                  
                            return "true"
                            
                  let $result := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)
                           where matches($mds/@ID,".*GridReference")                     
                            return $mds/@category = "DMD"
                            
                  return count($result) = 0 or $result = $check
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)      
                        where matches($mds/@ID,".*GridReference")            
                        return $mds/@ID
                        
               return if (count($result) = 0)
                  then "No Index classification in product."
                  else concat("Category ok for : ", string-join($result, ", "))
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                        where matches($mds/@ID,".*GridReference") and not(matches($mds/@category,"DMD"))
                        return $mds/@ID
                        
               return concat("Category not ok for : ", string-join($result, ", "))
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="gridReferenceClassification">
      <amalfi:name>Checks if Grid Reference Classification is correctly defined. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                  if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     fn:false()
                  else
                  let $check := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                           where matches($mds/@ID,".*GridReference")                  
                           return "true"
                           
                  let $result := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)
                           where matches($mds/@ID,".*GridReference")                     
                           return $mds/@classification = "DESCRIPTION"
                           
                  return count($result) = 0 or $result = $check
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)      
                        where matches($mds/@ID,".*GridReference")                   
                        return $mds/@ID
                        
               return if (count($result) = 0)
                     then "No Index classification in product."
                  else concat("Classification ok for : ", string-join($result, ", "))    
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                        where matches($mds/@ID,".*GridReference") and not(matches($mds/@classification, 
                           "DESCRIPTION"))
                            return $mds/@ID
                            
               return concat("Classification not ok for : ", string-join($result, ", "))
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="indexCategory">
      <amalfi:name>Checks if Index Category is correctly defined. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                  if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     fn:false()
                  else
                  let $check := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                           where matches($mds/@ID,".*Index")                  
                           return "true"
                           
                  let $result := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)
                           where matches($mds/@ID,".*Index")                     
                           return $mds/@category = "DMD"
                           
               return count($result) = 0 or $result = $check
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)      
                        where matches($mds/@ID,".*Index")            
                        return $mds/@ID
               
               return if (count($result) = 0)
                  then "No Index classification in product."
                  else concat("Category ok for : ", string-join($result, ", "))
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                        where matches($mds/@ID,".*Index") and not(matches($mds/@category,"DMD"))
                        return $mds/@ID
                        
               return concat("Category not ok for : ", string-join($result, ", "))
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="indexClassification">
      <amalfi:name>Checks if Index Classification is correctly defined. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                  if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     fn:false()
                  else
                  let $check := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                           where matches($mds/@ID,".*Index")                  
                           return "true"
                           
                  let $result := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)
                           where matches($mds/@ID,".*Index")                     
                           return $mds/@classification = "DESCRIPTION"
               
                  return count($result) = 0 or $result = $check
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)      
                        where matches($mds/@ID,".*Index")                   
                        return $mds/@ID
               
               return if (count($result) = 0)
                  then "No Index classification in product."
                  else concat("Classification ok for : ", string-join($result, ", "))    
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                        where matches($mds/@ID,".*Index") and not(matches($mds/@classification, 
                           "DESCRIPTION"))
                           return $mds/@ID
                           
               return concat("Classification not ok for : ", string-join($result, ", "))
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="informationCategory">
      <amalfi:name>Checks if Information Category is correctly defined. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                  if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     fn:false()
                  else
                  let $check := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                           where matches($mds/@ID,".*Information")                  
                           return "true"
                           
                  let $result := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)
                           where matches($mds/@ID,".*Information")                     
                            return $mds/@category = "DMD"
                            
                  return count($result) = 0 or $result = $check
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)      
                        where matches($mds/@ID,".*Information")            
                        return $mds/@ID
                        
               return if (count($result) = 0)
                  then "No Index classification in product."
                  else concat("Category ok for : ", string-join($result, ", "))
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                        where matches($mds/@ID,".*Information") and not(matches($mds/@category,"DMD"))
                        return $mds/@ID
                        
               return concat("Category not ok for : ", string-join($result, ", "))
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="informationClassification">
      <amalfi:name>Checks if Information Classification is correctly defined. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                  if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     fn:false()
                  else
                  let $check := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                           where matches($mds/@ID,".*Information")                  
                            return "true"
                            
                  let $result := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)
                           where matches($mds/@ID,".*Information")                     
                           return $mds/@classification = "DESCRIPTION"
               
                  return count($result) = 0 or $result = $check
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)      
                        where matches($mds/@ID,".*Information")                   
                        return $mds/@ID
                        
               return if (count($result) = 0)
                  then "No Index classification in product."
                  else concat("Classification ok for : ", string-join($result, ", "))    
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                        where matches($mds/@ID,".*Information") and not(matches($mds/@classification, 
                           "DESCRIPTION"))
                            return $mds/@ID
                            
               return concat("Classification not ok for : ", string-join($result, ", "))
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="orbitReferenceCategory">
      <amalfi:name>Checks if Orbit Reference Category is correctly defined. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                  if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     fn:false()
                  else
                  let $check := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                           where matches($mds/@ID,".*OrbitReference")                  
                           return "true"
                  let $result := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)
                           where matches($mds/@ID,".*OrbitReference")                     
                           return $mds/@category = "DMD"
                           
                  return count($result) = 0 or $result = $check
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)      
                        where matches($mds/@ID,".*OrbitReference")            
                        return $mds/@ID
               
               return if (count($result) = 0)
                  then "No Index classification in product."
                  else concat("Category ok for : ", string-join($result, ", "))
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                        where matches($mds/@ID,".*OrbitReference") and not(matches($mds/@category,"DMD"))
                        return $mds/@ID
                        
               return concat("Category not ok for : ", string-join($result, ", "))
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="orbitReferenceClassification">
      <amalfi:name>Checks if Orbit Reference Classification is correctly defined. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                  if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     fn:false()
                  else
                  let $check := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                           where matches($mds/@ID,".*OrbitReference")                  
                           return "true"
                           
                  let $result := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)
                           where matches($mds/@ID,".*OrbitReference")                     
                           return $mds/@classification = "DESCRIPTION"
                           
                  return count($result) = 0 or $result = $check
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)      
                        where matches($mds/@ID,".*OrbitReference")                   
                        return $mds/@ID
                        
               return if (count($result) = 0)
                  then "No Index classification in product."
                  else concat("Classification ok for : ", string-join($result, ", "))    
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                        where matches($mds/@ID,".*OrbitReference") and not(matches($mds/@classification, 
                           "DESCRIPTION"))
                           return $mds/@ID
                           
               return concat("Classification not ok for : ", string-join($result, ", "))
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="qualityInformationCategory">
      <amalfi:name>Checks if Quality Information Category is correctly defined. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                  if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     fn:false()
                  else
                  let $check := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                           where matches($mds/@ID,".*QualityInformation")                  
                           return "true"
                           
                  let $result := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)
                           where matches($mds/@ID,".*QualityInformation")                     
                           return $mds/@category = "DMD"
                           
                  return count($result) = 0 or $result = $check
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)      
                        where matches($mds/@ID,".*QualityInformation")            
                        return $mds/@ID
                        
               return if (count($result) = 0)
                  then "No Index classification in product."
                  else concat("Category ok for : ", string-join($result, ", "))
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                        where matches($mds/@ID,".*QualityInformation") and not(matches($mds/@category,
                           "DMD"))
                           return $mds/@ID
                        
               return concat("Category not ok for : ", string-join($result, ", "))
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="qualityInformationClassification">
      <amalfi:name>Checks if Quality Information Classification is correctly defined. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                  if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     fn:false()
                  else
                  let $check := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                           where matches($mds/@ID,".*QualityInformation")                  
                           return "true"
                           
                  let $result := for $mds in (*[matches (name(),
                        "(?i)manifest.safe")]/XFDU/metadataSection/*)
                           where matches($mds/@ID,".*QualityInformation")                     
                            return $mds/@classification = "DESCRIPTION"
                            
                  return count($result) = 0 or $result = $check
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)      
                        where matches($mds/@ID,".*QualityInformation")                   
                        return $mds/@ID
               
               return if (count($result) = 0)
                  then "No Index classification in product."
                  else concat("Classification ok for : ", string-join($result, ", "))    
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
               let $result := for $mds in (*[matches (name(),
                     "(?i)manifest.safe")]/XFDU/metadataSection/*)   
                        where matches($mds/@ID,".*QualityInformation") and 
                           not(matches($mds/@classification, "DESCRIPTION"))
                           return $mds/@ID
               
               return concat("Classification not ok for : ", string-join($result, ", "))
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="idReferences">
      <amalfi:name>Checks if all the Id References defined in the product are valid. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                  
                  declare function local:insertUniq ($sequence, $values)
                 {
                    let $value := for $val at $index in $values where $index = 1 return $val
                    let $others := for $val at $index in $values where $index != 1 return $val
            
                    let $newseq := (
                       for $iseq in $sequence where ($iseq < $value) return $iseq ,
                          $value,
                          for $iseq in $sequence where ($iseq > $value) return $iseq )
            
                    return
                       if (count($others) > 0)
                          then
                             local:insertUniq($newseq,$others)
                          else
                             $newseq
                 };
            
                 declare function local:sort($values)
                 {
                    local:insertUniq((),$values)
                 };
                 
                 if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     fn:false()
                  else
                  let $refs := (
                       let $nodes := manifest.safe/XFDU/informationPackageMap/contentUnit/contentUnit/@repID
                       for $idnames in $nodes
                          return
                              let $tokenized_refs := tokenize (data($idnames), " ") 
                              for $ref in $tokenized_refs
                              return $ref
                 )
                 let $contentUnitrepID := local:sort ($refs)
                 let $checkcontentUnitrepID := for $ref in $contentUnitrepID 
                    return "false"              
                 let $resultcontentUnitrepID := for $ref in $contentUnitrepID
                    return empty (manifest.safe/XFDU/metadataSection/metadataObject/@ID[matches(data(.), data($ref))])

                let $refs1 := (
                       let $nodes := manifest.safe/XFDU/dataObjectSection/dataObject/@repID
                       for $idnames in $nodes
                          return
                              let $tokenized_refs := tokenize (data($idnames), " ") 
                              for $ref in $tokenized_refs
                              return $ref
                 )
                 let $dataObjectrepID := local:sort ($refs1)
                 let $checkdataObjectrepID := for $ref in $dataObjectrepID 
                    return "false"              
                 let $resultdataObjectrepID := for $ref in $dataObjectrepID
                    return empty (manifest.safe/XFDU/metadataSection/metadataObject/@ID[matches(data(.), data($ref))])                 
                        
                let $refs2 := (
                       let $nodes := manifest.safe/XFDU/informationPackageMap/contentUnit//@dmdID
                       for $idnames in $nodes
                          return
                              let $tokenized_refs := tokenize (data($idnames), " ") 
                              for $ref in $tokenized_refs
                              return $ref
                 )
                 let $dmdID := local:sort ($refs2)
                 let $checkdmdID := for $ref in $dmdID 
                    return "false"              
                 let $resultdmdID := for $ref in $dmdID
                    return empty (manifest.safe/XFDU/metadataSection//@ID[matches(data(.), data($ref))])                 
                             
                let $refs3 := (
                       let $nodes := manifest.safe/XFDU/informationPackageMap/contentUnit//@pdiID
                       for $idnames in $nodes
                          return
                              let $tokenized_refs := tokenize (data($idnames), " ") 
                              for $ref in $tokenized_refs
                              return $ref
                 )
                 let $pdiID := local:sort ($refs3)
                 let $checkpdiID := for $ref in $pdiID 
                    return "false"              
                 let $resultpdiID := for $ref in $pdiID
                    return empty (manifest.safe/XFDU/metadataSection//@ID[matches(data(.), data($ref))])                 
                             
                let $refs4 := (
                       let $nodes := manifest.safe/XFDU/informationPackageMap/contentUnit//@dataObjectID
                       for $idnames in $nodes
                          return
                              let $tokenized_refs := tokenize (data($idnames), " ") 
                              for $ref in $tokenized_refs
                              return $ref
                 )
                 let $dataObjectID := local:sort ($refs4)
                 let $checkpdataObjectID := for $ref in $dataObjectID 
                    return "false"              
                 let $resultdataObjectID := for $ref in $dataObjectID
                    return empty (manifest.safe/XFDU/dataObjectSection/dataObject/@ID[matches(data(.), data($ref))])                 
                        
                 return $resultcontentUnitrepID = $checkcontentUnitrepID and 
                    $resultdataObjectrepID = $checkdataObjectrepID and
                    $resultdmdID = $checkdmdID and $resultpdiID = $checkpdiID and
                    $resultdataObjectID = $checkpdataObjectID
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
               "All the Id References defined in the product are valid."                 
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                  
                  declare function local:insertUniq ($sequence, $values)
                 {
                    let $value := for $val at $index in $values where $index = 1 return $val
                    let $others := for $val at $index in $values where $index != 1 return $val
            
                    let $newseq := (
                       for $iseq in $sequence where ($iseq < $value) return $iseq ,
                          $value,
                          for $iseq in $sequence where ($iseq > $value) return $iseq )
            
                    return
                       if (count($others) > 0)
                          then
                             local:insertUniq($newseq,$others)
                          else
                             $newseq
                 };
            
                 declare function local:sort($values)
                 {
                    local:insertUniq((),$values)
                 };
                 if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else
                 let $refs := (
                       let $nodes := manifest.safe/XFDU/informationPackageMap/contentUnit/contentUnit/@repID
                       for $idnames in $nodes
                          return
                              let $tokenized_refs := tokenize (data($idnames), " ") 
                              for $ref in $tokenized_refs
                              return $ref
                 )
                 let $contentUnitrepID := local:sort ($refs)           
                 let $resultcontentUnitrepID := for $ref in $contentUnitrepID
                    where empty (manifest.safe/XFDU/metadataSection/metadataObject/@ID[matches(data(.), data($ref))])
                       return $ref

                let $refs1 := (
                       let $nodes := manifest.safe/XFDU/dataObjectSection/dataObject/@repID
                       for $idnames in $nodes
                          return
                              let $tokenized_refs := tokenize (data($idnames), " ") 
                              for $ref in $tokenized_refs
                              return $ref
                 )
                 let $dataObjectrepID := local:sort ($refs1)        
                 let $resultdataObjectrepID := for $ref in $dataObjectrepID
                    where empty (manifest.safe/XFDU/metadataSection/metadataObject/@ID[matches(data(.), data($ref))])                 
                     return $ref
                        
                let $refs2 := (
                       let $nodes := manifest.safe/XFDU/informationPackageMap/contentUnit//@dmdID
                       for $idnames in $nodes
                          return
                              let $tokenized_refs := tokenize (data($idnames), " ") 
                              for $ref in $tokenized_refs
                              return $ref
                 )
                 let $dmdID := local:sort ($refs2)
                 let $resultdmdID := for $ref in $dmdID
                    where empty (manifest.safe/XFDU/metadataSection//@ID[matches(data(.), data($ref))])                 
                     return $ref
                             
                let $refs3 := (
                       let $nodes := manifest.safe/XFDU/informationPackageMap/contentUnit//@pdiID
                       for $idnames in $nodes
                          return
                              let $tokenized_refs := tokenize (data($idnames), " ") 
                              for $ref in $tokenized_refs
                              return $ref
                 )
                 let $pdiID := local:sort ($refs3)        
                 let $resultpdiID := for $ref in $pdiID
                    where empty (manifest.safe/XFDU/metadataSection//@ID[matches(data(.), data($ref))])                 
                  return $ref
                          
                let $refs4 := (
                       let $nodes := manifest.safe/XFDU/informationPackageMap/contentUnit//@dataObjectID
                       for $idnames in $nodes
                          return
                              let $tokenized_refs := tokenize (data($idnames), " ") 
                              for $ref in $tokenized_refs
                              return $ref
                 )
                 let $dataObjectID := local:sort ($refs4)
                 let $resultdataObjectID := for $ref in $dataObjectID
                    where empty (manifest.safe/XFDU/dataObjectSection/dataObject/@ID[matches(data(.), data($ref))])
                       return $ref  
                 let $count := count($resultcontentUnitrepID)+
                               count($resultdataObjectID)    +
                               count($resultdmdID)           +
                               count($resultdataObjectrepID) +
                               count($resultpdiID)
                 return
                 if ($count = 0)
                 then
                    "No ID used in this manifest."
                 else              
                    concat($count," id References defined in the product are not valid : ", 
                       string-join($resultcontentUnitrepID," ")," ", string-join($resultdmdID," ")," ", 
                       string-join($resultdataObjectrepID," ")," ",  string-join($resultpdiID," ")," ", 
                       string-join($resultdataObjectID," "))
                    
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="extraData">
      <amalfi:name>Checks if Extra Files are present in product directory. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                                 
                 if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     fn:false()
                  else
                  let $allfiles := *
                 let $result := for $file in $allfiles
                    return
                       let $ref := manifest.safe/XFDU/metadataSection/metadataObject/metadataReference/@*[name()="href" and data(.)=name($file)]                      
                         return empty($ref) and name($file) != name(.) and $file/@directory=false   
               
                 let $check := for $file in $allfiles
                   return "false"
                      
                 return $check = $result                
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[  
                  "No Extra Files found in product directory."
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[
                 if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else              
                  let $allfiles := *
                  let $result := for $file in $allfiles
                     where empty(manifest.safe/XFDU/metadataSection/metadataObject/metadataReference/@*[name()="href" and data(.)=name($file)]) and 
                   name($file) != name(.) and $file/@directory=false
                      return name($file)
                      
                  return concat(count($result)," extra Files found in product directory : ", string-join($result, " "))
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="hrefExist">
      <amalfi:name>Checks if all external references are present in the product directory. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xqueryParametrizedInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <amalfi:query><![CDATA[
                                 
                 declare function local:findHref ($dir, $path) as xs:boolean?
                {               
                   let $tok := for $token in $path where $token != '.' return $token
                   let $tk := $tok[1]
                   let $follow := for $val at $index in $tok where $index != 1 return $val
                      return
                         if (exists ($tk))
                            then
                               let $ret := $dir/*[name()=$tk]
                                  return
                                     if ($ret) 
                                        then 
                                           local:findHref ($ret, $follow)
                                        else
                                           xs:boolean ("false")
                            else
                               xs:boolean ("true")
                }; 
               
                if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     fn:false()
                  else
                  let $allhref := manifest.safe/XFDU/metadataSection/metadataObject/metadataReference/@href
                     let $allhref2 := manifest.safe/XFDU/dataObjectSection/dataObject/byteStream/fileLocation/@href                  
                  
                let $check := for $href in $allhref
                   return "true"
                  
                let $result := for $href in $allhref               
                   return local:findHref(., tokenize($href, "/"))
                   
                let $check2 := for $href in $allhref2
                   return "true"
                  
                let $result2 := for $href in $allhref2         
                   return local:findHref(., tokenize($href, "/"))
                              
                return $check = $result and $check2 = $result2
                  
               ]]></amalfi:query>
               <amalfi:successMessage><![CDATA[
                  "All external references are present in the product directory."
               ]]></amalfi:successMessage>
               <amalfi:failureMessage><![CDATA[            
               declare function local:findHref ($dir, $path) as xs:boolean?
               {               
                let $tok := for $token in $path where $token != '.' return $token
                let $tk := $tok[1]
                let $follow := for $val at $index in $tok where $index != 1 return $val
                   return
                      if (exists ($tk))
                         then
                             let $ret := $dir/*[name()=$tk]
                               return
                                  if ($ret) 
                                     then 
                                        local:findHref ($ret, $follow)
                                     else
                                         xs:boolean ("false")
                         else
                             xs:boolean ("true")
              }; 
               if (empty(*[matches (name(),
                        "(?i)manifest.safe")]/XFDU))
                  then
                     "Manifest is not present or empty"
                  else              
               let $allhref := manifest.safe/XFDU/metadataSection/metadataObject/metadataReference/@href
                  let $allhref2 := manifest.safe/XFDU/dataObjectSection/dataObject/byteStream/fileLocation/@href                  
                                
              let $result := for $href in $allhref
                 where local:findHref(., tokenize($href, "/")) = "false"   
                   return $href
                   
              let $result2 := for $href in $allhref2
                 where local:findHref(., tokenize($href, "/")) = "false"   
                   return $href
                              
               return 
                  concat((count($result)+count($result2))," external references are missing in the product directory : ",
                   string-join($result, " ")," ", string-join($result2, " "))
               ]]></amalfi:failureMessage>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="schemaXmlValidator">
      <amalfi:name>Schema Validator. (@category:concluding,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.gael.fr/amalfi#xmlSchemaStandardInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <query><![CDATA[.]]></query>
               <failureLimit>100</failureLimit>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="QualitMaskNbBands">
      <amalfi:name>Checks number of bands in quality masks (,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.esa.int/s2#OlqcBandStatsInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <masks>
                  <mask>
                     <typeName>
                           QI_DATA/MSK_QUALIT:NB_BANDS=8
                        </typeName>
                  </mask>
               </masks>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="ClassiMaskNbBands">
      <amalfi:name>Checks number of bands in classification masks (,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.esa.int/s2#OlqcBandStatsInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <masks>
                  <mask>
                     <typeName>
                           QI_DATA/MSK_CLASSI:NB_BANDS=3
                        </typeName>
                  </mask>
               </masks>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="DetfooMaskNbBands">
      <amalfi:name>Checks number of bands in detector footprint masks (,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.esa.int/s2#OlqcBandStatsInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <masks>
                  <mask>
                     <typeName>
                           QI_DATA/MSK_DETFOO:NB_BANDS
                        </typeName>
                  </mask>
               </masks>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="DetfooMaskFormat">
      <amalfi:name>Check DETFOO for format correctness (,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.esa.int/s2#OlqcBandStatsInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <masks>
                  <mask>
                     <typeName>
                           QI_DATA/MSK_DETFOO:PERCENTAGE
                        </typeName>
                  </mask>
               </masks>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Data_Loss">
      <amalfi:name>Check TECQUA for data loss (@category:concluding,@thematic:GENERAL_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.esa.int/s2#OlqcBandStatsInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <masks>
                  <mask>
                     <typeName>
                           QI_DATA/MSK_QUALIT:PERCENTAGE?2
                        </typeName>
                  </mask>
               </masks>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Jp2Gml">
      <amalfi:name>Checks JP2GML boxes in images  (,@thematic:FORMAT_CORRECTNESS)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.esa.int/s2#OlqcJp2GmlInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <applicableRegions>
                  <region>
                     <name>earth</name>
                     <geometry>POLYGON((-180 90, 180 90, 180 -90, -180 -90, -180 90))</geometry>
                  </region>
               </applicableRegions>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
   <amalfi:inspection rdf:ID="Data_Anomaly">
      <amalfi:name>Check for discovering new possibly NO-DATA, SATURATED or  pixels. (,@thematic:IMAGE_QUALITY)</amalfi:name>
      <amalfi:inspector>
         <rdf:Description>
            <amalfi:base rdf:resource="http://www.esa.int/s2#OlqcDataAnomalyInspector"/>
            <amalfi:parameters rdf:parseType="Literal">
               <applicableRegions>
                  <region>
                     <name>earth</name>
                     <geometry>POLYGON((-180 90, 180 90, 180 -90, -180 -90, -180 90))
                        </geometry>
                  </region>
               </applicableRegions>
               <masks>
                  <mask>
                     <typeName>
                           MSK_SATURA
                        </typeName>
                     <bands>
                        <band>B01</band>
                        <band>B02</band>
                        <band>B03</band>
                        <band>B04</band>
                        <band>B05</band>
                        <band>B06</band>
                        <band>B07</band>
                        <band>B08</band>
                        <band>B8A</band>
                        <band>B09</band>
                        <band>B10</band>
                        <band>B11</band>
                        <band>B12</band>
                     </bands>
                     <subType>
                        <name>
                              QT_SATURATED_PIXELS_L1B
                           </name>
                        <value>65535</value>
                     </subType>
                  </mask>
                  <mask>
                     <typeName>
                           MSK_DEFECT
                        </typeName>
                     <bands>
                        <band>B01</band>
                        <band>B02</band>
                        <band>B03</band>
                        <band>B04</band>
                        <band>B05</band>
                        <band>B06</band>
                        <band>B07</band>
                        <band>B08</band>
                        <band>B8A</band>
                        <band>B09</band>
                        <band>B10</band>
                        <band>B11</band>
                        <band>B12</band>
                     </bands>
                     <subType>
                        <name>
                              QT_DEFECTIVE_PIXELS
                           </name>
                        <value>0</value>
                     </subType>
                  </mask>
                  <mask>
                     <typeName>
                           MSK_NODATA
                        </typeName>
                     <bands>
                        <band>B01</band>
                        <band>B02</band>
                        <band>B03</band>
                        <band>B04</band>
                        <band>B05</band>
                        <band>B06</band>
                        <band>B07</band>
                        <band>B08</band>
                        <band>B8A</band>
                        <band>B09</band>
                        <band>B10</band>
                        <band>B11</band>
                        <band>B12</band>
                     </bands>
                     <subType>
                        <name>
                              QT_NODATA_PIXELS
                           </name>
                        <value>0</value>
                     </subType>
                  </mask>
               </masks>
            </amalfi:parameters>
         </rdf:Description>
      </amalfi:inspector>
   </amalfi:inspection>
</rdf:RDF>
